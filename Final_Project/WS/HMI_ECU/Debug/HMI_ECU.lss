
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002bd2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000096  00800060  00002bd2  00002c66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  008000f6  008000f6  00002cfc  2**0
                  ALLOC
  3 .stab         00002928  00000000  00000000  00002cfc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011df  00000000  00000000  00005624  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006803  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006943  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006ab3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000086fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000095e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a394  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a4f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a781  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000af4f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ed       	ldi	r30, 0xD2	; 210
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3f       	cpi	r26, 0xF6	; 246
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 ef       	ldi	r26, 0xF6	; 246
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3f       	cpi	r26, 0xF9	; 249
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 e7 15 	jmp	0x2bce	; 0x2bce <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 6b 15 	jmp	0x2ad6	; 0x2ad6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 ee       	ldi	r26, 0xE1	; 225
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 87 15 	jmp	0x2b0e	; 0x2b0e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 77 15 	jmp	0x2aee	; 0x2aee <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 93 15 	jmp	0x2b26	; 0x2b26 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 77 15 	jmp	0x2aee	; 0x2aee <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 93 15 	jmp	0x2b26	; 0x2b26 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6b 15 	jmp	0x2ad6	; 0x2ad6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 ee       	ldi	r24, 0xE1	; 225
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 87 15 	jmp	0x2b0e	; 0x2b0e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 77 15 	jmp	0x2aee	; 0x2aee <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 93 15 	jmp	0x2b26	; 0x2b26 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 77 15 	jmp	0x2aee	; 0x2aee <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 93 15 	jmp	0x2b26	; 0x2b26 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 77 15 	jmp	0x2aee	; 0x2aee <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 93 15 	jmp	0x2b26	; 0x2b26 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 7b 15 	jmp	0x2af6	; 0x2af6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 97 15 	jmp	0x2b2e	; 0x2b2e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
 * It is used to calculate the required time for each event.
 */
void Timer_callBack(void);

int main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2c 97       	sbiw	r28, 0x0c	; 12
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	/* Enable Global Interrupt I-Bit */
	SREG |= (1<<7);
     b5a:	af e5       	ldi	r26, 0x5F	; 95
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	ef e5       	ldi	r30, 0x5F	; 95
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	80 68       	ori	r24, 0x80	; 128
     b66:	8c 93       	st	X, r24

	/* Create configuration structure for UART driver */
	UART_ConfigType UART_Config = {Eight_Bit,Disabled,One_Bit,9600};
     b68:	ce 01       	movw	r24, r28
     b6a:	01 96       	adiw	r24, 0x01	; 1
     b6c:	99 87       	std	Y+9, r25	; 0x09
     b6e:	88 87       	std	Y+8, r24	; 0x08
     b70:	e9 ee       	ldi	r30, 0xE9	; 233
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	fb 87       	std	Y+11, r31	; 0x0b
     b76:	ea 87       	std	Y+10, r30	; 0x0a
     b78:	f7 e0       	ldi	r31, 0x07	; 7
     b7a:	fc 87       	std	Y+12, r31	; 0x0c
     b7c:	ea 85       	ldd	r30, Y+10	; 0x0a
     b7e:	fb 85       	ldd	r31, Y+11	; 0x0b
     b80:	00 80       	ld	r0, Z
     b82:	8a 85       	ldd	r24, Y+10	; 0x0a
     b84:	9b 85       	ldd	r25, Y+11	; 0x0b
     b86:	01 96       	adiw	r24, 0x01	; 1
     b88:	9b 87       	std	Y+11, r25	; 0x0b
     b8a:	8a 87       	std	Y+10, r24	; 0x0a
     b8c:	e8 85       	ldd	r30, Y+8	; 0x08
     b8e:	f9 85       	ldd	r31, Y+9	; 0x09
     b90:	00 82       	st	Z, r0
     b92:	88 85       	ldd	r24, Y+8	; 0x08
     b94:	99 85       	ldd	r25, Y+9	; 0x09
     b96:	01 96       	adiw	r24, 0x01	; 1
     b98:	99 87       	std	Y+9, r25	; 0x09
     b9a:	88 87       	std	Y+8, r24	; 0x08
     b9c:	9c 85       	ldd	r25, Y+12	; 0x0c
     b9e:	91 50       	subi	r25, 0x01	; 1
     ba0:	9c 87       	std	Y+12, r25	; 0x0c
     ba2:	ec 85       	ldd	r30, Y+12	; 0x0c
     ba4:	ee 23       	and	r30, r30
     ba6:	51 f7       	brne	.-44     	; 0xb7c <main+0x36>

	/* Set the Call back function pointer in the Timer 1 driver */
	Timer1_setCallBack(Timer_callBack);
     ba8:	8b ee       	ldi	r24, 0xEB	; 235
     baa:	99 e0       	ldi	r25, 0x09	; 9
     bac:	0e 94 17 14 	call	0x282e	; 0x282e <Timer1_setCallBack>

	LCD_init(); 						/* initialize LCD driver */
     bb0:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <LCD_init>
	UART_init(&UART_Config);			/* initialize UART driver */
     bb4:	ce 01       	movw	r24, r28
     bb6:	01 96       	adiw	r24, 0x01	; 1
     bb8:	0e 94 29 14 	call	0x2852	; 0x2852 <UART_init>
	step_one();							/* go to step one to store the first password */
     bbc:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <step_one>
	step_two();							/* go to step two to display options */
     bc0:	0e 94 8a 07 	call	0xf14	; 0xf14 <step_two>
     bc4:	ff cf       	rjmp	.-2      	; 0xbc4 <main+0x7e>

00000bc6 <step_one>:
 * Description :
 * Functional responsible for receive the password from the user and send it to the second MC
 * throw UART to store it at EEPROM.
 */
void step_one(void)
{
     bc6:	df 93       	push	r29
     bc8:	cf 93       	push	r28
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
     bce:	ac 97       	sbiw	r28, 0x2c	; 44
     bd0:	0f b6       	in	r0, 0x3f	; 63
     bd2:	f8 94       	cli
     bd4:	de bf       	out	0x3e, r29	; 62
     bd6:	0f be       	out	0x3f, r0	; 63
     bd8:	cd bf       	out	0x3d, r28	; 61
	uint8 key;			/* to get the pressed key */
	uint8 str_1[7];		/* array to get the 1st pass */
	uint8 str_2[7];		/* array to get the 2nd pass */
	uint8 counter=0;
     bda:	1d 8e       	std	Y+29, r1	; 0x1d
	/* step one */
	while(1)
	{
		LCD_clearScreen();
     bdc:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_clearScreen>
		/* Display this string "plz enter pass: " on LCD at the First row col 0 */
		LCD_displayStringRowColumn(0,0,"plz enter pass: ");
     be0:	20 e6       	ldi	r18, 0x60	; 96
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	60 e0       	ldi	r22, 0x00	; 0
     be8:	a9 01       	movw	r20, r18
     bea:	0e 94 37 13 	call	0x266e	; 0x266e <LCD_displayStringRowColumn>
		/* move the cursor to the second row col 0 */
		LCD_moveCursor(1,0);
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	60 e0       	ldi	r22, 0x00	; 0
     bf2:	0e 94 f5 12 	call	0x25ea	; 0x25ea <LCD_moveCursor>
		/* for enter pass */
		for(counter=0;counter<6;)
     bf6:	1d 8e       	std	Y+29, r1	; 0x1d
     bf8:	ab c0       	rjmp	.+342    	; 0xd50 <step_one+0x18a>
		{
			/* get the pressed key value */
			key=KEYPAD_getPressedKey();
     bfa:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <KEYPAD_getPressedKey>
     bfe:	8e 8f       	std	Y+30, r24	; 0x1e
			if((key>=0)&&(key<=9)&&(counter!=5))
     c00:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c02:	8a 30       	cpi	r24, 0x0A	; 10
     c04:	a0 f4       	brcc	.+40     	; 0xc2e <step_one+0x68>
     c06:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c08:	85 30       	cpi	r24, 0x05	; 5
     c0a:	89 f0       	breq	.+34     	; 0xc2e <step_one+0x68>
			{
				/* store the value at the array */
				str_1[counter]=key;
     c0c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c0e:	28 2f       	mov	r18, r24
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	ce 01       	movw	r24, r28
     c14:	4f 96       	adiw	r24, 0x1f	; 31
     c16:	fc 01       	movw	r30, r24
     c18:	e2 0f       	add	r30, r18
     c1a:	f3 1f       	adc	r31, r19
     c1c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c1e:	80 83       	st	Z, r24
				/* display '*' every digit in pass */
				LCD_displayCharacter('*');
     c20:	8a e2       	ldi	r24, 0x2A	; 42
     c22:	0e 94 dd 10 	call	0x21ba	; 0x21ba <LCD_displayCharacter>
				counter++;
     c26:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c28:	8f 5f       	subi	r24, 0xFF	; 255
     c2a:	8d 8f       	std	Y+29, r24	; 0x1d
     c2c:	1f c0       	rjmp	.+62     	; 0xc6c <step_one+0xa6>
			}
			else if((key==13)&&(counter==5))
     c2e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c30:	8d 30       	cpi	r24, 0x0D	; 13
     c32:	e1 f4       	brne	.+56     	; 0xc6c <step_one+0xa6>
     c34:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c36:	85 30       	cpi	r24, 0x05	; 5
     c38:	c9 f4       	brne	.+50     	; 0xc6c <step_one+0xa6>
			{
				/* Put '#' to say to the other MC it was the last value in the string */
				str_1[counter]='#';
     c3a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c3c:	28 2f       	mov	r18, r24
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	ce 01       	movw	r24, r28
     c42:	4f 96       	adiw	r24, 0x1f	; 31
     c44:	fc 01       	movw	r30, r24
     c46:	e2 0f       	add	r30, r18
     c48:	f3 1f       	adc	r31, r19
     c4a:	83 e2       	ldi	r24, 0x23	; 35
     c4c:	80 83       	st	Z, r24
				/* put '\0' to finish string */
				str_1[counter+1]='\0';
     c4e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c50:	88 2f       	mov	r24, r24
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	9c 01       	movw	r18, r24
     c56:	2f 5f       	subi	r18, 0xFF	; 255
     c58:	3f 4f       	sbci	r19, 0xFF	; 255
     c5a:	ce 01       	movw	r24, r28
     c5c:	4f 96       	adiw	r24, 0x1f	; 31
     c5e:	fc 01       	movw	r30, r24
     c60:	e2 0f       	add	r30, r18
     c62:	f3 1f       	adc	r31, r19
     c64:	10 82       	st	Z, r1
				counter++;
     c66:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c68:	8f 5f       	subi	r24, 0xFF	; 255
     c6a:	8d 8f       	std	Y+29, r24	; 0x1d
     c6c:	80 e0       	ldi	r24, 0x00	; 0
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	aa ef       	ldi	r26, 0xFA	; 250
     c72:	b3 e4       	ldi	r27, 0x43	; 67
     c74:	89 8f       	std	Y+25, r24	; 0x19
     c76:	9a 8f       	std	Y+26, r25	; 0x1a
     c78:	ab 8f       	std	Y+27, r26	; 0x1b
     c7a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c7c:	69 8d       	ldd	r22, Y+25	; 0x19
     c7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c80:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c82:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c84:	20 e0       	ldi	r18, 0x00	; 0
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	4a e7       	ldi	r20, 0x7A	; 122
     c8a:	53 e4       	ldi	r21, 0x43	; 67
     c8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c90:	dc 01       	movw	r26, r24
     c92:	cb 01       	movw	r24, r22
     c94:	8d 8b       	std	Y+21, r24	; 0x15
     c96:	9e 8b       	std	Y+22, r25	; 0x16
     c98:	af 8b       	std	Y+23, r26	; 0x17
     c9a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c9c:	6d 89       	ldd	r22, Y+21	; 0x15
     c9e:	7e 89       	ldd	r23, Y+22	; 0x16
     ca0:	8f 89       	ldd	r24, Y+23	; 0x17
     ca2:	98 8d       	ldd	r25, Y+24	; 0x18
     ca4:	20 e0       	ldi	r18, 0x00	; 0
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	40 e8       	ldi	r20, 0x80	; 128
     caa:	5f e3       	ldi	r21, 0x3F	; 63
     cac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cb0:	88 23       	and	r24, r24
     cb2:	2c f4       	brge	.+10     	; 0xcbe <step_one+0xf8>
		__ticks = 1;
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	9c 8b       	std	Y+20, r25	; 0x14
     cba:	8b 8b       	std	Y+19, r24	; 0x13
     cbc:	3f c0       	rjmp	.+126    	; 0xd3c <step_one+0x176>
	else if (__tmp > 65535)
     cbe:	6d 89       	ldd	r22, Y+21	; 0x15
     cc0:	7e 89       	ldd	r23, Y+22	; 0x16
     cc2:	8f 89       	ldd	r24, Y+23	; 0x17
     cc4:	98 8d       	ldd	r25, Y+24	; 0x18
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	3f ef       	ldi	r19, 0xFF	; 255
     cca:	4f e7       	ldi	r20, 0x7F	; 127
     ccc:	57 e4       	ldi	r21, 0x47	; 71
     cce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cd2:	18 16       	cp	r1, r24
     cd4:	4c f5       	brge	.+82     	; 0xd28 <step_one+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cd6:	69 8d       	ldd	r22, Y+25	; 0x19
     cd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cda:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	40 e2       	ldi	r20, 0x20	; 32
     ce4:	51 e4       	ldi	r21, 0x41	; 65
     ce6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cea:	dc 01       	movw	r26, r24
     cec:	cb 01       	movw	r24, r22
     cee:	bc 01       	movw	r22, r24
     cf0:	cd 01       	movw	r24, r26
     cf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cf6:	dc 01       	movw	r26, r24
     cf8:	cb 01       	movw	r24, r22
     cfa:	9c 8b       	std	Y+20, r25	; 0x14
     cfc:	8b 8b       	std	Y+19, r24	; 0x13
     cfe:	0f c0       	rjmp	.+30     	; 0xd1e <step_one+0x158>
     d00:	89 e1       	ldi	r24, 0x19	; 25
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	9a 8b       	std	Y+18, r25	; 0x12
     d06:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d08:	89 89       	ldd	r24, Y+17	; 0x11
     d0a:	9a 89       	ldd	r25, Y+18	; 0x12
     d0c:	01 97       	sbiw	r24, 0x01	; 1
     d0e:	f1 f7       	brne	.-4      	; 0xd0c <step_one+0x146>
     d10:	9a 8b       	std	Y+18, r25	; 0x12
     d12:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d14:	8b 89       	ldd	r24, Y+19	; 0x13
     d16:	9c 89       	ldd	r25, Y+20	; 0x14
     d18:	01 97       	sbiw	r24, 0x01	; 1
     d1a:	9c 8b       	std	Y+20, r25	; 0x14
     d1c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d1e:	8b 89       	ldd	r24, Y+19	; 0x13
     d20:	9c 89       	ldd	r25, Y+20	; 0x14
     d22:	00 97       	sbiw	r24, 0x00	; 0
     d24:	69 f7       	brne	.-38     	; 0xd00 <step_one+0x13a>
     d26:	14 c0       	rjmp	.+40     	; 0xd50 <step_one+0x18a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d28:	6d 89       	ldd	r22, Y+21	; 0x15
     d2a:	7e 89       	ldd	r23, Y+22	; 0x16
     d2c:	8f 89       	ldd	r24, Y+23	; 0x17
     d2e:	98 8d       	ldd	r25, Y+24	; 0x18
     d30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d34:	dc 01       	movw	r26, r24
     d36:	cb 01       	movw	r24, r22
     d38:	9c 8b       	std	Y+20, r25	; 0x14
     d3a:	8b 8b       	std	Y+19, r24	; 0x13
     d3c:	8b 89       	ldd	r24, Y+19	; 0x13
     d3e:	9c 89       	ldd	r25, Y+20	; 0x14
     d40:	98 8b       	std	Y+16, r25	; 0x10
     d42:	8f 87       	std	Y+15, r24	; 0x0f
     d44:	8f 85       	ldd	r24, Y+15	; 0x0f
     d46:	98 89       	ldd	r25, Y+16	; 0x10
     d48:	01 97       	sbiw	r24, 0x01	; 1
     d4a:	f1 f7       	brne	.-4      	; 0xd48 <step_one+0x182>
     d4c:	98 8b       	std	Y+16, r25	; 0x10
     d4e:	8f 87       	std	Y+15, r24	; 0x0f
		/* Display this string "plz enter pass: " on LCD at the First row col 0 */
		LCD_displayStringRowColumn(0,0,"plz enter pass: ");
		/* move the cursor to the second row col 0 */
		LCD_moveCursor(1,0);
		/* for enter pass */
		for(counter=0;counter<6;)
     d50:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d52:	86 30       	cpi	r24, 0x06	; 6
     d54:	08 f4       	brcc	.+2      	; 0xd58 <step_one+0x192>
     d56:	51 cf       	rjmp	.-350    	; 0xbfa <step_one+0x34>
				counter++;
			}
			/* delay to get the next key */
			_delay_ms(500);
		}
		LCD_clearScreen();
     d58:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_clearScreen>
		/* Display this string "plz re-enter the" on LCD at the First row col 0 */
		LCD_displayStringRowColumn(0,0,"plz re-enter the");
     d5c:	21 e7       	ldi	r18, 0x71	; 113
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	60 e0       	ldi	r22, 0x00	; 0
     d64:	a9 01       	movw	r20, r18
     d66:	0e 94 37 13 	call	0x266e	; 0x266e <LCD_displayStringRowColumn>
		/* Display this string "same pass: " on LCD at the second row col 0 */
		LCD_displayStringRowColumn(1,0,"same pass: ");
     d6a:	22 e8       	ldi	r18, 0x82	; 130
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	60 e0       	ldi	r22, 0x00	; 0
     d72:	a9 01       	movw	r20, r18
     d74:	0e 94 37 13 	call	0x266e	; 0x266e <LCD_displayStringRowColumn>
		/* for re-enter pass */
		for(counter=0;counter<6;)
     d78:	1d 8e       	std	Y+29, r1	; 0x1d
     d7a:	ab c0       	rjmp	.+342    	; 0xed2 <step_one+0x30c>
		{
			/* get the pressed key value */
			key=KEYPAD_getPressedKey();
     d7c:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <KEYPAD_getPressedKey>
     d80:	8e 8f       	std	Y+30, r24	; 0x1e
			if((key>=0)&&(key<=9)&&(counter!=5))
     d82:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d84:	8a 30       	cpi	r24, 0x0A	; 10
     d86:	a0 f4       	brcc	.+40     	; 0xdb0 <step_one+0x1ea>
     d88:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d8a:	85 30       	cpi	r24, 0x05	; 5
     d8c:	89 f0       	breq	.+34     	; 0xdb0 <step_one+0x1ea>
			{
				/* store the value at the array */
				str_2[counter]=key;
     d8e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d90:	28 2f       	mov	r18, r24
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	ce 01       	movw	r24, r28
     d96:	86 96       	adiw	r24, 0x26	; 38
     d98:	fc 01       	movw	r30, r24
     d9a:	e2 0f       	add	r30, r18
     d9c:	f3 1f       	adc	r31, r19
     d9e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     da0:	80 83       	st	Z, r24
				/* display '*' every digit in pass */
				LCD_displayCharacter('*');
     da2:	8a e2       	ldi	r24, 0x2A	; 42
     da4:	0e 94 dd 10 	call	0x21ba	; 0x21ba <LCD_displayCharacter>
				counter++;
     da8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     daa:	8f 5f       	subi	r24, 0xFF	; 255
     dac:	8d 8f       	std	Y+29, r24	; 0x1d
     dae:	1f c0       	rjmp	.+62     	; 0xdee <step_one+0x228>
			}
			else if((key==13)&&(counter==5))
     db0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     db2:	8d 30       	cpi	r24, 0x0D	; 13
     db4:	e1 f4       	brne	.+56     	; 0xdee <step_one+0x228>
     db6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     db8:	85 30       	cpi	r24, 0x05	; 5
     dba:	c9 f4       	brne	.+50     	; 0xdee <step_one+0x228>
			{
				/* Put '#' to say to the other MC it was the last value in the string */
				str_2[counter]='#';
     dbc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     dbe:	28 2f       	mov	r18, r24
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	ce 01       	movw	r24, r28
     dc4:	86 96       	adiw	r24, 0x26	; 38
     dc6:	fc 01       	movw	r30, r24
     dc8:	e2 0f       	add	r30, r18
     dca:	f3 1f       	adc	r31, r19
     dcc:	83 e2       	ldi	r24, 0x23	; 35
     dce:	80 83       	st	Z, r24
				/* put '\0' to finish string */
				str_2[counter+1]='\0';
     dd0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     dd2:	88 2f       	mov	r24, r24
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	9c 01       	movw	r18, r24
     dd8:	2f 5f       	subi	r18, 0xFF	; 255
     dda:	3f 4f       	sbci	r19, 0xFF	; 255
     ddc:	ce 01       	movw	r24, r28
     dde:	86 96       	adiw	r24, 0x26	; 38
     de0:	fc 01       	movw	r30, r24
     de2:	e2 0f       	add	r30, r18
     de4:	f3 1f       	adc	r31, r19
     de6:	10 82       	st	Z, r1
				counter++;
     de8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     dea:	8f 5f       	subi	r24, 0xFF	; 255
     dec:	8d 8f       	std	Y+29, r24	; 0x1d
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	aa ef       	ldi	r26, 0xFA	; 250
     df4:	b3 e4       	ldi	r27, 0x43	; 67
     df6:	8b 87       	std	Y+11, r24	; 0x0b
     df8:	9c 87       	std	Y+12, r25	; 0x0c
     dfa:	ad 87       	std	Y+13, r26	; 0x0d
     dfc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dfe:	6b 85       	ldd	r22, Y+11	; 0x0b
     e00:	7c 85       	ldd	r23, Y+12	; 0x0c
     e02:	8d 85       	ldd	r24, Y+13	; 0x0d
     e04:	9e 85       	ldd	r25, Y+14	; 0x0e
     e06:	20 e0       	ldi	r18, 0x00	; 0
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	4a e7       	ldi	r20, 0x7A	; 122
     e0c:	53 e4       	ldi	r21, 0x43	; 67
     e0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e12:	dc 01       	movw	r26, r24
     e14:	cb 01       	movw	r24, r22
     e16:	8f 83       	std	Y+7, r24	; 0x07
     e18:	98 87       	std	Y+8, r25	; 0x08
     e1a:	a9 87       	std	Y+9, r26	; 0x09
     e1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e1e:	6f 81       	ldd	r22, Y+7	; 0x07
     e20:	78 85       	ldd	r23, Y+8	; 0x08
     e22:	89 85       	ldd	r24, Y+9	; 0x09
     e24:	9a 85       	ldd	r25, Y+10	; 0x0a
     e26:	20 e0       	ldi	r18, 0x00	; 0
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	40 e8       	ldi	r20, 0x80	; 128
     e2c:	5f e3       	ldi	r21, 0x3F	; 63
     e2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e32:	88 23       	and	r24, r24
     e34:	2c f4       	brge	.+10     	; 0xe40 <step_one+0x27a>
		__ticks = 1;
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	9e 83       	std	Y+6, r25	; 0x06
     e3c:	8d 83       	std	Y+5, r24	; 0x05
     e3e:	3f c0       	rjmp	.+126    	; 0xebe <step_one+0x2f8>
	else if (__tmp > 65535)
     e40:	6f 81       	ldd	r22, Y+7	; 0x07
     e42:	78 85       	ldd	r23, Y+8	; 0x08
     e44:	89 85       	ldd	r24, Y+9	; 0x09
     e46:	9a 85       	ldd	r25, Y+10	; 0x0a
     e48:	20 e0       	ldi	r18, 0x00	; 0
     e4a:	3f ef       	ldi	r19, 0xFF	; 255
     e4c:	4f e7       	ldi	r20, 0x7F	; 127
     e4e:	57 e4       	ldi	r21, 0x47	; 71
     e50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e54:	18 16       	cp	r1, r24
     e56:	4c f5       	brge	.+82     	; 0xeaa <step_one+0x2e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e58:	6b 85       	ldd	r22, Y+11	; 0x0b
     e5a:	7c 85       	ldd	r23, Y+12	; 0x0c
     e5c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e5e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e60:	20 e0       	ldi	r18, 0x00	; 0
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	40 e2       	ldi	r20, 0x20	; 32
     e66:	51 e4       	ldi	r21, 0x41	; 65
     e68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e6c:	dc 01       	movw	r26, r24
     e6e:	cb 01       	movw	r24, r22
     e70:	bc 01       	movw	r22, r24
     e72:	cd 01       	movw	r24, r26
     e74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e78:	dc 01       	movw	r26, r24
     e7a:	cb 01       	movw	r24, r22
     e7c:	9e 83       	std	Y+6, r25	; 0x06
     e7e:	8d 83       	std	Y+5, r24	; 0x05
     e80:	0f c0       	rjmp	.+30     	; 0xea0 <step_one+0x2da>
     e82:	89 e1       	ldi	r24, 0x19	; 25
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	9c 83       	std	Y+4, r25	; 0x04
     e88:	8b 83       	std	Y+3, r24	; 0x03
     e8a:	8b 81       	ldd	r24, Y+3	; 0x03
     e8c:	9c 81       	ldd	r25, Y+4	; 0x04
     e8e:	01 97       	sbiw	r24, 0x01	; 1
     e90:	f1 f7       	brne	.-4      	; 0xe8e <step_one+0x2c8>
     e92:	9c 83       	std	Y+4, r25	; 0x04
     e94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e96:	8d 81       	ldd	r24, Y+5	; 0x05
     e98:	9e 81       	ldd	r25, Y+6	; 0x06
     e9a:	01 97       	sbiw	r24, 0x01	; 1
     e9c:	9e 83       	std	Y+6, r25	; 0x06
     e9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ea0:	8d 81       	ldd	r24, Y+5	; 0x05
     ea2:	9e 81       	ldd	r25, Y+6	; 0x06
     ea4:	00 97       	sbiw	r24, 0x00	; 0
     ea6:	69 f7       	brne	.-38     	; 0xe82 <step_one+0x2bc>
     ea8:	14 c0       	rjmp	.+40     	; 0xed2 <step_one+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eaa:	6f 81       	ldd	r22, Y+7	; 0x07
     eac:	78 85       	ldd	r23, Y+8	; 0x08
     eae:	89 85       	ldd	r24, Y+9	; 0x09
     eb0:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eb6:	dc 01       	movw	r26, r24
     eb8:	cb 01       	movw	r24, r22
     eba:	9e 83       	std	Y+6, r25	; 0x06
     ebc:	8d 83       	std	Y+5, r24	; 0x05
     ebe:	8d 81       	ldd	r24, Y+5	; 0x05
     ec0:	9e 81       	ldd	r25, Y+6	; 0x06
     ec2:	9a 83       	std	Y+2, r25	; 0x02
     ec4:	89 83       	std	Y+1, r24	; 0x01
     ec6:	89 81       	ldd	r24, Y+1	; 0x01
     ec8:	9a 81       	ldd	r25, Y+2	; 0x02
     eca:	01 97       	sbiw	r24, 0x01	; 1
     ecc:	f1 f7       	brne	.-4      	; 0xeca <step_one+0x304>
     ece:	9a 83       	std	Y+2, r25	; 0x02
     ed0:	89 83       	std	Y+1, r24	; 0x01
		/* Display this string "plz re-enter the" on LCD at the First row col 0 */
		LCD_displayStringRowColumn(0,0,"plz re-enter the");
		/* Display this string "same pass: " on LCD at the second row col 0 */
		LCD_displayStringRowColumn(1,0,"same pass: ");
		/* for re-enter pass */
		for(counter=0;counter<6;)
     ed2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ed4:	86 30       	cpi	r24, 0x06	; 6
     ed6:	08 f4       	brcc	.+2      	; 0xeda <step_one+0x314>
     ed8:	51 cf       	rjmp	.-350    	; 0xd7c <step_one+0x1b6>
			}
			/* delay to get the next key */
			_delay_ms(500);
		}
		/* send to the other MC i'm ready to send data */
		UART_sendByte(MC_READY);
     eda:	8f ef       	ldi	r24, 0xFF	; 255
     edc:	0e 94 b7 14 	call	0x296e	; 0x296e <UART_sendByte>
		/* send the first pass */
		UART_sendString(str_1);
     ee0:	ce 01       	movw	r24, r28
     ee2:	4f 96       	adiw	r24, 0x1f	; 31
     ee4:	0e 94 dd 14 	call	0x29ba	; 0x29ba <UART_sendString>
		/* send the second pass*/
		UART_sendString(str_2);
     ee8:	ce 01       	movw	r24, r28
     eea:	86 96       	adiw	r24, 0x26	; 38
     eec:	0e 94 dd 14 	call	0x29ba	; 0x29ba <UART_sendString>
		/* wait until other MC process the data sent and reply */
		while(UART_recieveByte()!=MC_READY){}
     ef0:	0e 94 ce 14 	call	0x299c	; 0x299c <UART_recieveByte>
     ef4:	8f 3f       	cpi	r24, 0xFF	; 255
     ef6:	e1 f7       	brne	.-8      	; 0xef0 <step_one+0x32a>
		/* if data accepted mean the two pass are same so break this step */
		if(UART_recieveByte()==ACCEPTED)
     ef8:	0e 94 ce 14 	call	0x299c	; 0x299c <UART_recieveByte>
     efc:	81 30       	cpi	r24, 0x01	; 1
     efe:	09 f0       	breq	.+2      	; 0xf02 <step_one+0x33c>
     f00:	6d ce       	rjmp	.-806    	; 0xbdc <step_one+0x16>
		{
			break;
		}
	}
}
     f02:	ac 96       	adiw	r28, 0x2c	; 44
     f04:	0f b6       	in	r0, 0x3f	; 63
     f06:	f8 94       	cli
     f08:	de bf       	out	0x3e, r29	; 62
     f0a:	0f be       	out	0x3f, r0	; 63
     f0c:	cd bf       	out	0x3d, r28	; 61
     f0e:	cf 91       	pop	r28
     f10:	df 91       	pop	r29
     f12:	08 95       	ret

00000f14 <step_two>:
 * Description :
 * Functional responsible for displaying main options to the user and get the command send it to
 * the other MC throw UART if then take the required action from the Control MC.
 */
void step_two(void)
{
     f14:	df 93       	push	r29
     f16:	cf 93       	push	r28
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	e0 97       	sbiw	r28, 0x30	; 48
     f1e:	0f b6       	in	r0, 0x3f	; 63
     f20:	f8 94       	cli
     f22:	de bf       	out	0x3e, r29	; 62
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	cd bf       	out	0x3d, r28	; 61
	uint8 key;			/* to get the pressed key */
	uint8 str[7];		/* array to get the pass */
	uint8 counter=0;
     f28:	1d 8e       	std	Y+29, r1	; 0x1d

	/* Create configuration structure for Timer 1 driver to give interrupt every 1 sec */
	Timer1_ConfigType Timer1_Config = {0,15625,F_CPU_64,CTC};
     f2a:	ce 01       	movw	r24, r28
     f2c:	86 96       	adiw	r24, 0x26	; 38
     f2e:	9d a7       	std	Y+45, r25	; 0x2d
     f30:	8c a7       	std	Y+44, r24	; 0x2c
     f32:	e0 ef       	ldi	r30, 0xF0	; 240
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	ff a7       	std	Y+47, r31	; 0x2f
     f38:	ee a7       	std	Y+46, r30	; 0x2e
     f3a:	f6 e0       	ldi	r31, 0x06	; 6
     f3c:	f8 ab       	std	Y+48, r31	; 0x30
     f3e:	ee a5       	ldd	r30, Y+46	; 0x2e
     f40:	ff a5       	ldd	r31, Y+47	; 0x2f
     f42:	00 80       	ld	r0, Z
     f44:	8e a5       	ldd	r24, Y+46	; 0x2e
     f46:	9f a5       	ldd	r25, Y+47	; 0x2f
     f48:	01 96       	adiw	r24, 0x01	; 1
     f4a:	9f a7       	std	Y+47, r25	; 0x2f
     f4c:	8e a7       	std	Y+46, r24	; 0x2e
     f4e:	ec a5       	ldd	r30, Y+44	; 0x2c
     f50:	fd a5       	ldd	r31, Y+45	; 0x2d
     f52:	00 82       	st	Z, r0
     f54:	8c a5       	ldd	r24, Y+44	; 0x2c
     f56:	9d a5       	ldd	r25, Y+45	; 0x2d
     f58:	01 96       	adiw	r24, 0x01	; 1
     f5a:	9d a7       	std	Y+45, r25	; 0x2d
     f5c:	8c a7       	std	Y+44, r24	; 0x2c
     f5e:	98 a9       	ldd	r25, Y+48	; 0x30
     f60:	91 50       	subi	r25, 0x01	; 1
     f62:	98 ab       	std	Y+48, r25	; 0x30
     f64:	e8 a9       	ldd	r30, Y+48	; 0x30
     f66:	ee 23       	and	r30, r30
     f68:	51 f7       	brne	.-44     	; 0xf3e <step_two+0x2a>
	/* step two */
	while(1)
	{
		LCD_clearScreen();
     f6a:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_clearScreen>
		/* Display this string "+ : Open Door" on LCD at the First row col 0 */
		LCD_displayStringRowColumn(0,0,"+ : Open Door");
     f6e:	2e e8       	ldi	r18, 0x8E	; 142
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	60 e0       	ldi	r22, 0x00	; 0
     f76:	a9 01       	movw	r20, r18
     f78:	0e 94 37 13 	call	0x266e	; 0x266e <LCD_displayStringRowColumn>
		/* Display this string "- : Change Pass" on LCD at the second row col 0 */
		LCD_displayStringRowColumn(1,0,"- : Change Pass");
     f7c:	2c e9       	ldi	r18, 0x9C	; 156
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	60 e0       	ldi	r22, 0x00	; 0
     f84:	a9 01       	movw	r20, r18
     f86:	0e 94 37 13 	call	0x266e	; 0x266e <LCD_displayStringRowColumn>
		do
		{
			/* get the pressed key value */
			key=KEYPAD_getPressedKey();
     f8a:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <KEYPAD_getPressedKey>
     f8e:	8e 8f       	std	Y+30, r24	; 0x1e
		}while(!((key=='+')||(key=='-')));
     f90:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f92:	8b 32       	cpi	r24, 0x2B	; 43
     f94:	19 f0       	breq	.+6      	; 0xf9c <step_two+0x88>
     f96:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f98:	8d 32       	cpi	r24, 0x2D	; 45
     f9a:	b9 f7       	brne	.-18     	; 0xf8a <step_two+0x76>
		/* step three */
		if(key=='+')
     f9c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f9e:	8b 32       	cpi	r24, 0x2B	; 43
     fa0:	09 f0       	breq	.+2      	; 0xfa4 <step_two+0x90>
     fa2:	23 c1       	rjmp	.+582    	; 0x11ea <step_two+0x2d6>
		{
			while(1)
			{
				LCD_clearScreen();
     fa4:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_clearScreen>
				/* Display this string "plz enter pass: " on LCD at the First row col 0 */
				LCD_displayStringRowColumn(0,0,"plz enter pass: ");
     fa8:	20 e6       	ldi	r18, 0x60	; 96
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	60 e0       	ldi	r22, 0x00	; 0
     fb0:	a9 01       	movw	r20, r18
     fb2:	0e 94 37 13 	call	0x266e	; 0x266e <LCD_displayStringRowColumn>
				/* move the cursor to the second row col 0 */
				LCD_moveCursor(1,0);
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	60 e0       	ldi	r22, 0x00	; 0
     fba:	0e 94 f5 12 	call	0x25ea	; 0x25ea <LCD_moveCursor>
				/* for enter pass */
				for(counter=0;counter<6;)
     fbe:	1d 8e       	std	Y+29, r1	; 0x1d
     fc0:	ab c0       	rjmp	.+342    	; 0x1118 <step_two+0x204>
				{
					/* get the pressed key value */
					key=KEYPAD_getPressedKey();
     fc2:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <KEYPAD_getPressedKey>
     fc6:	8e 8f       	std	Y+30, r24	; 0x1e
					if((key>=0)&&(key<=9)&&(counter!=5))
     fc8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fca:	8a 30       	cpi	r24, 0x0A	; 10
     fcc:	a0 f4       	brcc	.+40     	; 0xff6 <step_two+0xe2>
     fce:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fd0:	85 30       	cpi	r24, 0x05	; 5
     fd2:	89 f0       	breq	.+34     	; 0xff6 <step_two+0xe2>
					{
						/* store the value at the array */
						str[counter]=key;
     fd4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	ce 01       	movw	r24, r28
     fdc:	4f 96       	adiw	r24, 0x1f	; 31
     fde:	fc 01       	movw	r30, r24
     fe0:	e2 0f       	add	r30, r18
     fe2:	f3 1f       	adc	r31, r19
     fe4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fe6:	80 83       	st	Z, r24
						/* display '*' every digit in pass */
						LCD_displayCharacter('*');
     fe8:	8a e2       	ldi	r24, 0x2A	; 42
     fea:	0e 94 dd 10 	call	0x21ba	; 0x21ba <LCD_displayCharacter>
						counter++;
     fee:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ff0:	8f 5f       	subi	r24, 0xFF	; 255
     ff2:	8d 8f       	std	Y+29, r24	; 0x1d
     ff4:	1f c0       	rjmp	.+62     	; 0x1034 <step_two+0x120>
					}
					else if((key==13)&&(counter==5))
     ff6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ff8:	8d 30       	cpi	r24, 0x0D	; 13
     ffa:	e1 f4       	brne	.+56     	; 0x1034 <step_two+0x120>
     ffc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ffe:	85 30       	cpi	r24, 0x05	; 5
    1000:	c9 f4       	brne	.+50     	; 0x1034 <step_two+0x120>
					{
						/* Put '#' to say to the other MC it was the last value in the string */
						str[counter]='#';
    1002:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	ce 01       	movw	r24, r28
    100a:	4f 96       	adiw	r24, 0x1f	; 31
    100c:	fc 01       	movw	r30, r24
    100e:	e2 0f       	add	r30, r18
    1010:	f3 1f       	adc	r31, r19
    1012:	83 e2       	ldi	r24, 0x23	; 35
    1014:	80 83       	st	Z, r24
						/* put '\0' to finish string */
						str[counter+1]='\0';
    1016:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1018:	88 2f       	mov	r24, r24
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	9c 01       	movw	r18, r24
    101e:	2f 5f       	subi	r18, 0xFF	; 255
    1020:	3f 4f       	sbci	r19, 0xFF	; 255
    1022:	ce 01       	movw	r24, r28
    1024:	4f 96       	adiw	r24, 0x1f	; 31
    1026:	fc 01       	movw	r30, r24
    1028:	e2 0f       	add	r30, r18
    102a:	f3 1f       	adc	r31, r19
    102c:	10 82       	st	Z, r1
						counter++;
    102e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1030:	8f 5f       	subi	r24, 0xFF	; 255
    1032:	8d 8f       	std	Y+29, r24	; 0x1d
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	aa ef       	ldi	r26, 0xFA	; 250
    103a:	b3 e4       	ldi	r27, 0x43	; 67
    103c:	89 8f       	std	Y+25, r24	; 0x19
    103e:	9a 8f       	std	Y+26, r25	; 0x1a
    1040:	ab 8f       	std	Y+27, r26	; 0x1b
    1042:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1044:	69 8d       	ldd	r22, Y+25	; 0x19
    1046:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1048:	8b 8d       	ldd	r24, Y+27	; 0x1b
    104a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    104c:	20 e0       	ldi	r18, 0x00	; 0
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	4a e7       	ldi	r20, 0x7A	; 122
    1052:	53 e4       	ldi	r21, 0x43	; 67
    1054:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1058:	dc 01       	movw	r26, r24
    105a:	cb 01       	movw	r24, r22
    105c:	8d 8b       	std	Y+21, r24	; 0x15
    105e:	9e 8b       	std	Y+22, r25	; 0x16
    1060:	af 8b       	std	Y+23, r26	; 0x17
    1062:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1064:	6d 89       	ldd	r22, Y+21	; 0x15
    1066:	7e 89       	ldd	r23, Y+22	; 0x16
    1068:	8f 89       	ldd	r24, Y+23	; 0x17
    106a:	98 8d       	ldd	r25, Y+24	; 0x18
    106c:	20 e0       	ldi	r18, 0x00	; 0
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	40 e8       	ldi	r20, 0x80	; 128
    1072:	5f e3       	ldi	r21, 0x3F	; 63
    1074:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1078:	88 23       	and	r24, r24
    107a:	2c f4       	brge	.+10     	; 0x1086 <step_two+0x172>
		__ticks = 1;
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	9c 8b       	std	Y+20, r25	; 0x14
    1082:	8b 8b       	std	Y+19, r24	; 0x13
    1084:	3f c0       	rjmp	.+126    	; 0x1104 <step_two+0x1f0>
	else if (__tmp > 65535)
    1086:	6d 89       	ldd	r22, Y+21	; 0x15
    1088:	7e 89       	ldd	r23, Y+22	; 0x16
    108a:	8f 89       	ldd	r24, Y+23	; 0x17
    108c:	98 8d       	ldd	r25, Y+24	; 0x18
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	3f ef       	ldi	r19, 0xFF	; 255
    1092:	4f e7       	ldi	r20, 0x7F	; 127
    1094:	57 e4       	ldi	r21, 0x47	; 71
    1096:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    109a:	18 16       	cp	r1, r24
    109c:	4c f5       	brge	.+82     	; 0x10f0 <step_two+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    109e:	69 8d       	ldd	r22, Y+25	; 0x19
    10a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10a6:	20 e0       	ldi	r18, 0x00	; 0
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	40 e2       	ldi	r20, 0x20	; 32
    10ac:	51 e4       	ldi	r21, 0x41	; 65
    10ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10b2:	dc 01       	movw	r26, r24
    10b4:	cb 01       	movw	r24, r22
    10b6:	bc 01       	movw	r22, r24
    10b8:	cd 01       	movw	r24, r26
    10ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10be:	dc 01       	movw	r26, r24
    10c0:	cb 01       	movw	r24, r22
    10c2:	9c 8b       	std	Y+20, r25	; 0x14
    10c4:	8b 8b       	std	Y+19, r24	; 0x13
    10c6:	0f c0       	rjmp	.+30     	; 0x10e6 <step_two+0x1d2>
    10c8:	89 e1       	ldi	r24, 0x19	; 25
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	9a 8b       	std	Y+18, r25	; 0x12
    10ce:	89 8b       	std	Y+17, r24	; 0x11
    10d0:	89 89       	ldd	r24, Y+17	; 0x11
    10d2:	9a 89       	ldd	r25, Y+18	; 0x12
    10d4:	01 97       	sbiw	r24, 0x01	; 1
    10d6:	f1 f7       	brne	.-4      	; 0x10d4 <step_two+0x1c0>
    10d8:	9a 8b       	std	Y+18, r25	; 0x12
    10da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10dc:	8b 89       	ldd	r24, Y+19	; 0x13
    10de:	9c 89       	ldd	r25, Y+20	; 0x14
    10e0:	01 97       	sbiw	r24, 0x01	; 1
    10e2:	9c 8b       	std	Y+20, r25	; 0x14
    10e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10e6:	8b 89       	ldd	r24, Y+19	; 0x13
    10e8:	9c 89       	ldd	r25, Y+20	; 0x14
    10ea:	00 97       	sbiw	r24, 0x00	; 0
    10ec:	69 f7       	brne	.-38     	; 0x10c8 <step_two+0x1b4>
    10ee:	14 c0       	rjmp	.+40     	; 0x1118 <step_two+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10f0:	6d 89       	ldd	r22, Y+21	; 0x15
    10f2:	7e 89       	ldd	r23, Y+22	; 0x16
    10f4:	8f 89       	ldd	r24, Y+23	; 0x17
    10f6:	98 8d       	ldd	r25, Y+24	; 0x18
    10f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10fc:	dc 01       	movw	r26, r24
    10fe:	cb 01       	movw	r24, r22
    1100:	9c 8b       	std	Y+20, r25	; 0x14
    1102:	8b 8b       	std	Y+19, r24	; 0x13
    1104:	8b 89       	ldd	r24, Y+19	; 0x13
    1106:	9c 89       	ldd	r25, Y+20	; 0x14
    1108:	98 8b       	std	Y+16, r25	; 0x10
    110a:	8f 87       	std	Y+15, r24	; 0x0f
    110c:	8f 85       	ldd	r24, Y+15	; 0x0f
    110e:	98 89       	ldd	r25, Y+16	; 0x10
    1110:	01 97       	sbiw	r24, 0x01	; 1
    1112:	f1 f7       	brne	.-4      	; 0x1110 <step_two+0x1fc>
    1114:	98 8b       	std	Y+16, r25	; 0x10
    1116:	8f 87       	std	Y+15, r24	; 0x0f
				/* Display this string "plz enter pass: " on LCD at the First row col 0 */
				LCD_displayStringRowColumn(0,0,"plz enter pass: ");
				/* move the cursor to the second row col 0 */
				LCD_moveCursor(1,0);
				/* for enter pass */
				for(counter=0;counter<6;)
    1118:	8d 8d       	ldd	r24, Y+29	; 0x1d
    111a:	86 30       	cpi	r24, 0x06	; 6
    111c:	08 f4       	brcc	.+2      	; 0x1120 <step_two+0x20c>
    111e:	51 cf       	rjmp	.-350    	; 0xfc2 <step_two+0xae>
					}
					/* delay to get the next key */
					_delay_ms(500);
				}
				/* send to the other MC i'm ready to send data */
				UART_sendByte(MC_READY);
    1120:	8f ef       	ldi	r24, 0xFF	; 255
    1122:	0e 94 b7 14 	call	0x296e	; 0x296e <UART_sendByte>
				/* send the pass */
				UART_sendString(str);
    1126:	ce 01       	movw	r24, r28
    1128:	4f 96       	adiw	r24, 0x1f	; 31
    112a:	0e 94 dd 14 	call	0x29ba	; 0x29ba <UART_sendString>
				/* send command */
				UART_sendByte('+');
    112e:	8b e2       	ldi	r24, 0x2B	; 43
    1130:	0e 94 b7 14 	call	0x296e	; 0x296e <UART_sendByte>
				/* wait until other MC process the data sent and reply */
				while(UART_recieveByte()!=MC_READY){}
    1134:	0e 94 ce 14 	call	0x299c	; 0x299c <UART_recieveByte>
    1138:	8f 3f       	cpi	r24, 0xFF	; 255
    113a:	e1 f7       	brne	.-8      	; 0x1134 <step_two+0x220>
				/* if data accepted mean the password is true */
				if(UART_recieveByte()==ACCEPTED)
    113c:	0e 94 ce 14 	call	0x299c	; 0x299c <UART_recieveByte>
    1140:	81 30       	cpi	r24, 0x01	; 1
    1142:	a1 f5       	brne	.+104    	; 0x11ac <step_two+0x298>
				{
					LCD_clearScreen();
    1144:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_clearScreen>
					/* Display this string "Door is Unlocking" on LCD at the First row col 0 */
					LCD_displayStringRowColumn(0,0,"Door is Unlocking");
    1148:	2c ea       	ldi	r18, 0xAC	; 172
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	60 e0       	ldi	r22, 0x00	; 0
    1150:	a9 01       	movw	r20, r18
    1152:	0e 94 37 13 	call	0x266e	; 0x266e <LCD_displayStringRowColumn>
					/* start the timer */
					Timer1_init(&Timer1_Config);
    1156:	ce 01       	movw	r24, r28
    1158:	86 96       	adiw	r24, 0x26	; 38
    115a:	0e 94 b0 13 	call	0x2760	; 0x2760 <Timer1_init>
					while(1)
					{
						if(g_tick==DOOR_UNLOCKING_TIME)
    115e:	80 91 f6 00 	lds	r24, 0x00F6
    1162:	8f 30       	cpi	r24, 0x0F	; 15
    1164:	e1 f7       	brne	.-8      	; 0x115e <step_two+0x24a>
						{
							g_tick=0;
    1166:	10 92 f6 00 	sts	0x00F6, r1
							break;
						}
					}
					LCD_clearScreen();
    116a:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_clearScreen>
					/* Display this string "Door is Open" on LCD at the First row col 0 */
					LCD_displayStringRowColumn(0,0,"Door is Open");
    116e:	2e eb       	ldi	r18, 0xBE	; 190
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	60 e0       	ldi	r22, 0x00	; 0
    1176:	a9 01       	movw	r20, r18
    1178:	0e 94 37 13 	call	0x266e	; 0x266e <LCD_displayStringRowColumn>
					while(1)
					{
						if(g_tick==DOOR_OPEN_TIME)
    117c:	80 91 f6 00 	lds	r24, 0x00F6
    1180:	83 30       	cpi	r24, 0x03	; 3
    1182:	e1 f7       	brne	.-8      	; 0x117c <step_two+0x268>
						{
							g_tick=0;
    1184:	10 92 f6 00 	sts	0x00F6, r1
							break;
						}
					}
					LCD_clearScreen();
    1188:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_clearScreen>
					/* Display this string "Door is Locking" on LCD at the First row col 0 */
					LCD_displayStringRowColumn(0,0,"Door is Locking");
    118c:	2b ec       	ldi	r18, 0xCB	; 203
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	80 e0       	ldi	r24, 0x00	; 0
    1192:	60 e0       	ldi	r22, 0x00	; 0
    1194:	a9 01       	movw	r20, r18
    1196:	0e 94 37 13 	call	0x266e	; 0x266e <LCD_displayStringRowColumn>
					while(1)
					{
						if(g_tick==DOOR_LOCKING_TIME)
    119a:	80 91 f6 00 	lds	r24, 0x00F6
    119e:	8f 30       	cpi	r24, 0x0F	; 15
    11a0:	e1 f7       	brne	.-8      	; 0x119a <step_two+0x286>
						{
							g_tick=0;
    11a2:	10 92 f6 00 	sts	0x00F6, r1
							break;
						}
					}
					Timer1_deInit();		/* stop the timer */
    11a6:	0e 94 0a 14 	call	0x2814	; 0x2814 <Timer1_deInit>
    11aa:	df ce       	rjmp	.-578    	; 0xf6a <step_two+0x56>
				}
				else
				{
					/* step five */
					/* wait until other MC process the data sent and reply */
					while(UART_recieveByte()!=MC_READY){}
    11ac:	0e 94 ce 14 	call	0x299c	; 0x299c <UART_recieveByte>
    11b0:	8f 3f       	cpi	r24, 0xFF	; 255
    11b2:	e1 f7       	brne	.-8      	; 0x11ac <step_two+0x298>
					/* if data accepted mean that reach the max allowed for wrong pass */
					if(UART_recieveByte()==ERROR_DETCTED)
    11b4:	0e 94 ce 14 	call	0x299c	; 0x299c <UART_recieveByte>
    11b8:	8e 3f       	cpi	r24, 0xFE	; 254
    11ba:	09 f0       	breq	.+2      	; 0x11be <step_two+0x2aa>
    11bc:	f3 ce       	rjmp	.-538    	; 0xfa4 <step_two+0x90>
					{
						LCD_clearScreen();
    11be:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_clearScreen>
						/* Display this string "ERROR" on LCD at the First row col 0 */
						LCD_displayStringRowColumn(0,0,"ERROR");
    11c2:	2b ed       	ldi	r18, 0xDB	; 219
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	60 e0       	ldi	r22, 0x00	; 0
    11ca:	a9 01       	movw	r20, r18
    11cc:	0e 94 37 13 	call	0x266e	; 0x266e <LCD_displayStringRowColumn>
						/* start the timer */
						Timer1_init(&Timer1_Config);
    11d0:	ce 01       	movw	r24, r28
    11d2:	86 96       	adiw	r24, 0x26	; 38
    11d4:	0e 94 b0 13 	call	0x2760	; 0x2760 <Timer1_init>
						while(1)
						{
							if(g_tick==ERROR_TIME)
    11d8:	80 91 f6 00 	lds	r24, 0x00F6
    11dc:	8c 33       	cpi	r24, 0x3C	; 60
    11de:	e1 f7       	brne	.-8      	; 0x11d8 <step_two+0x2c4>
							{
								g_tick=0;
    11e0:	10 92 f6 00 	sts	0x00F6, r1
								break;
							}
						}
						Timer1_deInit();		/* stop the timer */
    11e4:	0e 94 0a 14 	call	0x2814	; 0x2814 <Timer1_deInit>
    11e8:	c0 ce       	rjmp	.-640    	; 0xf6a <step_two+0x56>
					}
				}
			}
		}
		/* step four */
		else if(key=='-')
    11ea:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11ec:	8d 32       	cpi	r24, 0x2D	; 45
    11ee:	09 f0       	breq	.+2      	; 0x11f2 <step_two+0x2de>
    11f0:	bc ce       	rjmp	.-648    	; 0xf6a <step_two+0x56>
		{
			while(1)
			{
				LCD_clearScreen();
    11f2:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_clearScreen>
				/* Display this string "plz enter pass: " on LCD at the First row col 0 */
				LCD_displayStringRowColumn(0,0,"plz enter pass: ");
    11f6:	20 e6       	ldi	r18, 0x60	; 96
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	60 e0       	ldi	r22, 0x00	; 0
    11fe:	a9 01       	movw	r20, r18
    1200:	0e 94 37 13 	call	0x266e	; 0x266e <LCD_displayStringRowColumn>
				/* move the cursor to the second row col 0 */
				LCD_moveCursor(1,0);
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	60 e0       	ldi	r22, 0x00	; 0
    1208:	0e 94 f5 12 	call	0x25ea	; 0x25ea <LCD_moveCursor>
				/* for enter pass */
				for(counter=0;counter<6;)
    120c:	1d 8e       	std	Y+29, r1	; 0x1d
    120e:	ab c0       	rjmp	.+342    	; 0x1366 <step_two+0x452>
				{
					/* get the pressed key value */
					key=KEYPAD_getPressedKey();
    1210:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <KEYPAD_getPressedKey>
    1214:	8e 8f       	std	Y+30, r24	; 0x1e
					if((key>=0)&&(key<=9)&&(counter!=5))
    1216:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1218:	8a 30       	cpi	r24, 0x0A	; 10
    121a:	a0 f4       	brcc	.+40     	; 0x1244 <step_two+0x330>
    121c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    121e:	85 30       	cpi	r24, 0x05	; 5
    1220:	89 f0       	breq	.+34     	; 0x1244 <step_two+0x330>
					{
						/* store the value at the array */
						str[counter]=key;
    1222:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	ce 01       	movw	r24, r28
    122a:	4f 96       	adiw	r24, 0x1f	; 31
    122c:	fc 01       	movw	r30, r24
    122e:	e2 0f       	add	r30, r18
    1230:	f3 1f       	adc	r31, r19
    1232:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1234:	80 83       	st	Z, r24
						/* display '*' every digit in pass */
						LCD_displayCharacter('*');
    1236:	8a e2       	ldi	r24, 0x2A	; 42
    1238:	0e 94 dd 10 	call	0x21ba	; 0x21ba <LCD_displayCharacter>
						counter++;
    123c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    123e:	8f 5f       	subi	r24, 0xFF	; 255
    1240:	8d 8f       	std	Y+29, r24	; 0x1d
    1242:	1f c0       	rjmp	.+62     	; 0x1282 <step_two+0x36e>
					}
					else if((key==13)&&(counter==5))
    1244:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1246:	8d 30       	cpi	r24, 0x0D	; 13
    1248:	e1 f4       	brne	.+56     	; 0x1282 <step_two+0x36e>
    124a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    124c:	85 30       	cpi	r24, 0x05	; 5
    124e:	c9 f4       	brne	.+50     	; 0x1282 <step_two+0x36e>
					{
						/* Put '#' to say to the other MC it was the last value in the string */
						str[counter]='#';
    1250:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	ce 01       	movw	r24, r28
    1258:	4f 96       	adiw	r24, 0x1f	; 31
    125a:	fc 01       	movw	r30, r24
    125c:	e2 0f       	add	r30, r18
    125e:	f3 1f       	adc	r31, r19
    1260:	83 e2       	ldi	r24, 0x23	; 35
    1262:	80 83       	st	Z, r24
						/* put '\0' to finish string */
						str[counter+1]='\0';
    1264:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1266:	88 2f       	mov	r24, r24
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	9c 01       	movw	r18, r24
    126c:	2f 5f       	subi	r18, 0xFF	; 255
    126e:	3f 4f       	sbci	r19, 0xFF	; 255
    1270:	ce 01       	movw	r24, r28
    1272:	4f 96       	adiw	r24, 0x1f	; 31
    1274:	fc 01       	movw	r30, r24
    1276:	e2 0f       	add	r30, r18
    1278:	f3 1f       	adc	r31, r19
    127a:	10 82       	st	Z, r1
						counter++;
    127c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    127e:	8f 5f       	subi	r24, 0xFF	; 255
    1280:	8d 8f       	std	Y+29, r24	; 0x1d
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	aa ef       	ldi	r26, 0xFA	; 250
    1288:	b3 e4       	ldi	r27, 0x43	; 67
    128a:	8b 87       	std	Y+11, r24	; 0x0b
    128c:	9c 87       	std	Y+12, r25	; 0x0c
    128e:	ad 87       	std	Y+13, r26	; 0x0d
    1290:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1292:	6b 85       	ldd	r22, Y+11	; 0x0b
    1294:	7c 85       	ldd	r23, Y+12	; 0x0c
    1296:	8d 85       	ldd	r24, Y+13	; 0x0d
    1298:	9e 85       	ldd	r25, Y+14	; 0x0e
    129a:	20 e0       	ldi	r18, 0x00	; 0
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	4a e7       	ldi	r20, 0x7A	; 122
    12a0:	53 e4       	ldi	r21, 0x43	; 67
    12a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12a6:	dc 01       	movw	r26, r24
    12a8:	cb 01       	movw	r24, r22
    12aa:	8f 83       	std	Y+7, r24	; 0x07
    12ac:	98 87       	std	Y+8, r25	; 0x08
    12ae:	a9 87       	std	Y+9, r26	; 0x09
    12b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12b2:	6f 81       	ldd	r22, Y+7	; 0x07
    12b4:	78 85       	ldd	r23, Y+8	; 0x08
    12b6:	89 85       	ldd	r24, Y+9	; 0x09
    12b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	40 e8       	ldi	r20, 0x80	; 128
    12c0:	5f e3       	ldi	r21, 0x3F	; 63
    12c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12c6:	88 23       	and	r24, r24
    12c8:	2c f4       	brge	.+10     	; 0x12d4 <step_two+0x3c0>
		__ticks = 1;
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	9e 83       	std	Y+6, r25	; 0x06
    12d0:	8d 83       	std	Y+5, r24	; 0x05
    12d2:	3f c0       	rjmp	.+126    	; 0x1352 <step_two+0x43e>
	else if (__tmp > 65535)
    12d4:	6f 81       	ldd	r22, Y+7	; 0x07
    12d6:	78 85       	ldd	r23, Y+8	; 0x08
    12d8:	89 85       	ldd	r24, Y+9	; 0x09
    12da:	9a 85       	ldd	r25, Y+10	; 0x0a
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	3f ef       	ldi	r19, 0xFF	; 255
    12e0:	4f e7       	ldi	r20, 0x7F	; 127
    12e2:	57 e4       	ldi	r21, 0x47	; 71
    12e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12e8:	18 16       	cp	r1, r24
    12ea:	4c f5       	brge	.+82     	; 0x133e <step_two+0x42a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    12ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    12f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    12f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    12f4:	20 e0       	ldi	r18, 0x00	; 0
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	40 e2       	ldi	r20, 0x20	; 32
    12fa:	51 e4       	ldi	r21, 0x41	; 65
    12fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1300:	dc 01       	movw	r26, r24
    1302:	cb 01       	movw	r24, r22
    1304:	bc 01       	movw	r22, r24
    1306:	cd 01       	movw	r24, r26
    1308:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    130c:	dc 01       	movw	r26, r24
    130e:	cb 01       	movw	r24, r22
    1310:	9e 83       	std	Y+6, r25	; 0x06
    1312:	8d 83       	std	Y+5, r24	; 0x05
    1314:	0f c0       	rjmp	.+30     	; 0x1334 <step_two+0x420>
    1316:	89 e1       	ldi	r24, 0x19	; 25
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	9c 83       	std	Y+4, r25	; 0x04
    131c:	8b 83       	std	Y+3, r24	; 0x03
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	9c 81       	ldd	r25, Y+4	; 0x04
    1322:	01 97       	sbiw	r24, 0x01	; 1
    1324:	f1 f7       	brne	.-4      	; 0x1322 <step_two+0x40e>
    1326:	9c 83       	std	Y+4, r25	; 0x04
    1328:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    132a:	8d 81       	ldd	r24, Y+5	; 0x05
    132c:	9e 81       	ldd	r25, Y+6	; 0x06
    132e:	01 97       	sbiw	r24, 0x01	; 1
    1330:	9e 83       	std	Y+6, r25	; 0x06
    1332:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1334:	8d 81       	ldd	r24, Y+5	; 0x05
    1336:	9e 81       	ldd	r25, Y+6	; 0x06
    1338:	00 97       	sbiw	r24, 0x00	; 0
    133a:	69 f7       	brne	.-38     	; 0x1316 <step_two+0x402>
    133c:	14 c0       	rjmp	.+40     	; 0x1366 <step_two+0x452>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    133e:	6f 81       	ldd	r22, Y+7	; 0x07
    1340:	78 85       	ldd	r23, Y+8	; 0x08
    1342:	89 85       	ldd	r24, Y+9	; 0x09
    1344:	9a 85       	ldd	r25, Y+10	; 0x0a
    1346:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    134a:	dc 01       	movw	r26, r24
    134c:	cb 01       	movw	r24, r22
    134e:	9e 83       	std	Y+6, r25	; 0x06
    1350:	8d 83       	std	Y+5, r24	; 0x05
    1352:	8d 81       	ldd	r24, Y+5	; 0x05
    1354:	9e 81       	ldd	r25, Y+6	; 0x06
    1356:	9a 83       	std	Y+2, r25	; 0x02
    1358:	89 83       	std	Y+1, r24	; 0x01
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	9a 81       	ldd	r25, Y+2	; 0x02
    135e:	01 97       	sbiw	r24, 0x01	; 1
    1360:	f1 f7       	brne	.-4      	; 0x135e <step_two+0x44a>
    1362:	9a 83       	std	Y+2, r25	; 0x02
    1364:	89 83       	std	Y+1, r24	; 0x01
				/* Display this string "plz enter pass: " on LCD at the First row col 0 */
				LCD_displayStringRowColumn(0,0,"plz enter pass: ");
				/* move the cursor to the second row col 0 */
				LCD_moveCursor(1,0);
				/* for enter pass */
				for(counter=0;counter<6;)
    1366:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1368:	86 30       	cpi	r24, 0x06	; 6
    136a:	08 f4       	brcc	.+2      	; 0x136e <step_two+0x45a>
    136c:	51 cf       	rjmp	.-350    	; 0x1210 <step_two+0x2fc>
					}
					/* delay to get the next key */
					_delay_ms(500);
				}
				/* send to the other MC i'm ready to send data */
				UART_sendByte(MC_READY);
    136e:	8f ef       	ldi	r24, 0xFF	; 255
    1370:	0e 94 b7 14 	call	0x296e	; 0x296e <UART_sendByte>
				/* send the pass */
				UART_sendString(str);
    1374:	ce 01       	movw	r24, r28
    1376:	4f 96       	adiw	r24, 0x1f	; 31
    1378:	0e 94 dd 14 	call	0x29ba	; 0x29ba <UART_sendString>
				/* send command */
				UART_sendByte('-');
    137c:	8d e2       	ldi	r24, 0x2D	; 45
    137e:	0e 94 b7 14 	call	0x296e	; 0x296e <UART_sendByte>
				/* wait until other MC process the data sent and reply */
				while(UART_recieveByte()!=MC_READY){}
    1382:	0e 94 ce 14 	call	0x299c	; 0x299c <UART_recieveByte>
    1386:	8f 3f       	cpi	r24, 0xFF	; 255
    1388:	e1 f7       	brne	.-8      	; 0x1382 <step_two+0x46e>
				/* if data accepted mean the password is true */
				if(UART_recieveByte()==ACCEPTED)
    138a:	0e 94 ce 14 	call	0x299c	; 0x299c <UART_recieveByte>
    138e:	81 30       	cpi	r24, 0x01	; 1
    1390:	19 f4       	brne	.+6      	; 0x1398 <step_two+0x484>
				{
					step_one();							/* go to step one to store the new pass */
    1392:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <step_one>
    1396:	e9 cd       	rjmp	.-1070   	; 0xf6a <step_two+0x56>
				}
				else
				{
					/* step five */
					/* wait until other MC process the data sent and reply */
					while(UART_recieveByte()!=MC_READY){}
    1398:	0e 94 ce 14 	call	0x299c	; 0x299c <UART_recieveByte>
    139c:	8f 3f       	cpi	r24, 0xFF	; 255
    139e:	e1 f7       	brne	.-8      	; 0x1398 <step_two+0x484>
					/* if data accepted mean that reach the max allowed for wrong pass */
					if(UART_recieveByte()==ERROR_DETCTED)
    13a0:	0e 94 ce 14 	call	0x299c	; 0x299c <UART_recieveByte>
    13a4:	8e 3f       	cpi	r24, 0xFE	; 254
    13a6:	09 f0       	breq	.+2      	; 0x13aa <step_two+0x496>
    13a8:	24 cf       	rjmp	.-440    	; 0x11f2 <step_two+0x2de>
					{
						LCD_clearScreen();
    13aa:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_clearScreen>
						/* Display this string "ERROR" on LCD at the First row col 0 */
						LCD_displayStringRowColumn(0,0,"ERROR");
    13ae:	2b ed       	ldi	r18, 0xDB	; 219
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	60 e0       	ldi	r22, 0x00	; 0
    13b6:	a9 01       	movw	r20, r18
    13b8:	0e 94 37 13 	call	0x266e	; 0x266e <LCD_displayStringRowColumn>
						/* start the timer */
						Timer1_init(&Timer1_Config);
    13bc:	ce 01       	movw	r24, r28
    13be:	86 96       	adiw	r24, 0x26	; 38
    13c0:	0e 94 b0 13 	call	0x2760	; 0x2760 <Timer1_init>
						while(1)
						{
							if(g_tick==ERROR_TIME)
    13c4:	80 91 f6 00 	lds	r24, 0x00F6
    13c8:	8c 33       	cpi	r24, 0x3C	; 60
    13ca:	e1 f7       	brne	.-8      	; 0x13c4 <step_two+0x4b0>
							{
								g_tick=0;
    13cc:	10 92 f6 00 	sts	0x00F6, r1
								break;
							}
						}
						Timer1_deInit();		/* stop the timer */
    13d0:	0e 94 0a 14 	call	0x2814	; 0x2814 <Timer1_deInit>
    13d4:	ca cd       	rjmp	.-1132   	; 0xf6a <step_two+0x56>

000013d6 <Timer_callBack>:

/* This is the call back function called by the Timer 1 driver.
 * It is used to calculate the required time for each event.
 */
void Timer_callBack(void)
{
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
	/* Increment ticks */
	g_tick++;
    13de:	80 91 f6 00 	lds	r24, 0x00F6
    13e2:	8f 5f       	subi	r24, 0xFF	; 255
    13e4:	80 93 f6 00 	sts	0x00F6, r24
	/* clear time counted */
	TCNT1=0;
    13e8:	ec e4       	ldi	r30, 0x4C	; 76
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	11 82       	std	Z+1, r1	; 0x01
    13ee:	10 82       	st	Z, r1
}
    13f0:	cf 91       	pop	r28
    13f2:	df 91       	pop	r29
    13f4:	08 95       	ret

000013f6 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    13f6:	df 93       	push	r29
    13f8:	cf 93       	push	r28
    13fa:	00 d0       	rcall	.+0      	; 0x13fc <GPIO_setupPinDirection+0x6>
    13fc:	00 d0       	rcall	.+0      	; 0x13fe <GPIO_setupPinDirection+0x8>
    13fe:	0f 92       	push	r0
    1400:	cd b7       	in	r28, 0x3d	; 61
    1402:	de b7       	in	r29, 0x3e	; 62
    1404:	89 83       	std	Y+1, r24	; 0x01
    1406:	6a 83       	std	Y+2, r22	; 0x02
    1408:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	88 30       	cpi	r24, 0x08	; 8
    140e:	08 f0       	brcs	.+2      	; 0x1412 <GPIO_setupPinDirection+0x1c>
    1410:	d5 c0       	rjmp	.+426    	; 0x15bc <GPIO_setupPinDirection+0x1c6>
    1412:	89 81       	ldd	r24, Y+1	; 0x01
    1414:	84 30       	cpi	r24, 0x04	; 4
    1416:	08 f0       	brcs	.+2      	; 0x141a <GPIO_setupPinDirection+0x24>
    1418:	d1 c0       	rjmp	.+418    	; 0x15bc <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    141a:	89 81       	ldd	r24, Y+1	; 0x01
    141c:	28 2f       	mov	r18, r24
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	3d 83       	std	Y+5, r19	; 0x05
    1422:	2c 83       	std	Y+4, r18	; 0x04
    1424:	8c 81       	ldd	r24, Y+4	; 0x04
    1426:	9d 81       	ldd	r25, Y+5	; 0x05
    1428:	81 30       	cpi	r24, 0x01	; 1
    142a:	91 05       	cpc	r25, r1
    142c:	09 f4       	brne	.+2      	; 0x1430 <GPIO_setupPinDirection+0x3a>
    142e:	43 c0       	rjmp	.+134    	; 0x14b6 <GPIO_setupPinDirection+0xc0>
    1430:	2c 81       	ldd	r18, Y+4	; 0x04
    1432:	3d 81       	ldd	r19, Y+5	; 0x05
    1434:	22 30       	cpi	r18, 0x02	; 2
    1436:	31 05       	cpc	r19, r1
    1438:	2c f4       	brge	.+10     	; 0x1444 <GPIO_setupPinDirection+0x4e>
    143a:	8c 81       	ldd	r24, Y+4	; 0x04
    143c:	9d 81       	ldd	r25, Y+5	; 0x05
    143e:	00 97       	sbiw	r24, 0x00	; 0
    1440:	71 f0       	breq	.+28     	; 0x145e <GPIO_setupPinDirection+0x68>
    1442:	bc c0       	rjmp	.+376    	; 0x15bc <GPIO_setupPinDirection+0x1c6>
    1444:	2c 81       	ldd	r18, Y+4	; 0x04
    1446:	3d 81       	ldd	r19, Y+5	; 0x05
    1448:	22 30       	cpi	r18, 0x02	; 2
    144a:	31 05       	cpc	r19, r1
    144c:	09 f4       	brne	.+2      	; 0x1450 <GPIO_setupPinDirection+0x5a>
    144e:	5f c0       	rjmp	.+190    	; 0x150e <GPIO_setupPinDirection+0x118>
    1450:	8c 81       	ldd	r24, Y+4	; 0x04
    1452:	9d 81       	ldd	r25, Y+5	; 0x05
    1454:	83 30       	cpi	r24, 0x03	; 3
    1456:	91 05       	cpc	r25, r1
    1458:	09 f4       	brne	.+2      	; 0x145c <GPIO_setupPinDirection+0x66>
    145a:	85 c0       	rjmp	.+266    	; 0x1566 <GPIO_setupPinDirection+0x170>
    145c:	af c0       	rjmp	.+350    	; 0x15bc <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    145e:	8b 81       	ldd	r24, Y+3	; 0x03
    1460:	81 30       	cpi	r24, 0x01	; 1
    1462:	a1 f4       	brne	.+40     	; 0x148c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1464:	aa e3       	ldi	r26, 0x3A	; 58
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	ea e3       	ldi	r30, 0x3A	; 58
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	48 2f       	mov	r20, r24
    1470:	8a 81       	ldd	r24, Y+2	; 0x02
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	02 2e       	mov	r0, r18
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <GPIO_setupPinDirection+0x8c>
    147e:	88 0f       	add	r24, r24
    1480:	99 1f       	adc	r25, r25
    1482:	0a 94       	dec	r0
    1484:	e2 f7       	brpl	.-8      	; 0x147e <GPIO_setupPinDirection+0x88>
    1486:	84 2b       	or	r24, r20
    1488:	8c 93       	st	X, r24
    148a:	98 c0       	rjmp	.+304    	; 0x15bc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    148c:	aa e3       	ldi	r26, 0x3A	; 58
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	ea e3       	ldi	r30, 0x3A	; 58
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	48 2f       	mov	r20, r24
    1498:	8a 81       	ldd	r24, Y+2	; 0x02
    149a:	28 2f       	mov	r18, r24
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	02 2e       	mov	r0, r18
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <GPIO_setupPinDirection+0xb4>
    14a6:	88 0f       	add	r24, r24
    14a8:	99 1f       	adc	r25, r25
    14aa:	0a 94       	dec	r0
    14ac:	e2 f7       	brpl	.-8      	; 0x14a6 <GPIO_setupPinDirection+0xb0>
    14ae:	80 95       	com	r24
    14b0:	84 23       	and	r24, r20
    14b2:	8c 93       	st	X, r24
    14b4:	83 c0       	rjmp	.+262    	; 0x15bc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    14b6:	8b 81       	ldd	r24, Y+3	; 0x03
    14b8:	81 30       	cpi	r24, 0x01	; 1
    14ba:	a1 f4       	brne	.+40     	; 0x14e4 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    14bc:	a7 e3       	ldi	r26, 0x37	; 55
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	e7 e3       	ldi	r30, 0x37	; 55
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	48 2f       	mov	r20, r24
    14c8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ca:	28 2f       	mov	r18, r24
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	02 2e       	mov	r0, r18
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <GPIO_setupPinDirection+0xe4>
    14d6:	88 0f       	add	r24, r24
    14d8:	99 1f       	adc	r25, r25
    14da:	0a 94       	dec	r0
    14dc:	e2 f7       	brpl	.-8      	; 0x14d6 <GPIO_setupPinDirection+0xe0>
    14de:	84 2b       	or	r24, r20
    14e0:	8c 93       	st	X, r24
    14e2:	6c c0       	rjmp	.+216    	; 0x15bc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    14e4:	a7 e3       	ldi	r26, 0x37	; 55
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e7 e3       	ldi	r30, 0x37	; 55
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	48 2f       	mov	r20, r24
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	02 2e       	mov	r0, r18
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <GPIO_setupPinDirection+0x10c>
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	0a 94       	dec	r0
    1504:	e2 f7       	brpl	.-8      	; 0x14fe <GPIO_setupPinDirection+0x108>
    1506:	80 95       	com	r24
    1508:	84 23       	and	r24, r20
    150a:	8c 93       	st	X, r24
    150c:	57 c0       	rjmp	.+174    	; 0x15bc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	81 30       	cpi	r24, 0x01	; 1
    1512:	a1 f4       	brne	.+40     	; 0x153c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1514:	a4 e3       	ldi	r26, 0x34	; 52
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	e4 e3       	ldi	r30, 0x34	; 52
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	48 2f       	mov	r20, r24
    1520:	8a 81       	ldd	r24, Y+2	; 0x02
    1522:	28 2f       	mov	r18, r24
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	02 2e       	mov	r0, r18
    152c:	02 c0       	rjmp	.+4      	; 0x1532 <GPIO_setupPinDirection+0x13c>
    152e:	88 0f       	add	r24, r24
    1530:	99 1f       	adc	r25, r25
    1532:	0a 94       	dec	r0
    1534:	e2 f7       	brpl	.-8      	; 0x152e <GPIO_setupPinDirection+0x138>
    1536:	84 2b       	or	r24, r20
    1538:	8c 93       	st	X, r24
    153a:	40 c0       	rjmp	.+128    	; 0x15bc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    153c:	a4 e3       	ldi	r26, 0x34	; 52
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	e4 e3       	ldi	r30, 0x34	; 52
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	48 2f       	mov	r20, r24
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	28 2f       	mov	r18, r24
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	02 2e       	mov	r0, r18
    1554:	02 c0       	rjmp	.+4      	; 0x155a <GPIO_setupPinDirection+0x164>
    1556:	88 0f       	add	r24, r24
    1558:	99 1f       	adc	r25, r25
    155a:	0a 94       	dec	r0
    155c:	e2 f7       	brpl	.-8      	; 0x1556 <GPIO_setupPinDirection+0x160>
    155e:	80 95       	com	r24
    1560:	84 23       	and	r24, r20
    1562:	8c 93       	st	X, r24
    1564:	2b c0       	rjmp	.+86     	; 0x15bc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1566:	8b 81       	ldd	r24, Y+3	; 0x03
    1568:	81 30       	cpi	r24, 0x01	; 1
    156a:	a1 f4       	brne	.+40     	; 0x1594 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    156c:	a1 e3       	ldi	r26, 0x31	; 49
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	e1 e3       	ldi	r30, 0x31	; 49
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	48 2f       	mov	r20, r24
    1578:	8a 81       	ldd	r24, Y+2	; 0x02
    157a:	28 2f       	mov	r18, r24
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	02 2e       	mov	r0, r18
    1584:	02 c0       	rjmp	.+4      	; 0x158a <GPIO_setupPinDirection+0x194>
    1586:	88 0f       	add	r24, r24
    1588:	99 1f       	adc	r25, r25
    158a:	0a 94       	dec	r0
    158c:	e2 f7       	brpl	.-8      	; 0x1586 <GPIO_setupPinDirection+0x190>
    158e:	84 2b       	or	r24, r20
    1590:	8c 93       	st	X, r24
    1592:	14 c0       	rjmp	.+40     	; 0x15bc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1594:	a1 e3       	ldi	r26, 0x31	; 49
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	e1 e3       	ldi	r30, 0x31	; 49
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	48 2f       	mov	r20, r24
    15a0:	8a 81       	ldd	r24, Y+2	; 0x02
    15a2:	28 2f       	mov	r18, r24
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	02 2e       	mov	r0, r18
    15ac:	02 c0       	rjmp	.+4      	; 0x15b2 <GPIO_setupPinDirection+0x1bc>
    15ae:	88 0f       	add	r24, r24
    15b0:	99 1f       	adc	r25, r25
    15b2:	0a 94       	dec	r0
    15b4:	e2 f7       	brpl	.-8      	; 0x15ae <GPIO_setupPinDirection+0x1b8>
    15b6:	80 95       	com	r24
    15b8:	84 23       	and	r24, r20
    15ba:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    15bc:	0f 90       	pop	r0
    15be:	0f 90       	pop	r0
    15c0:	0f 90       	pop	r0
    15c2:	0f 90       	pop	r0
    15c4:	0f 90       	pop	r0
    15c6:	cf 91       	pop	r28
    15c8:	df 91       	pop	r29
    15ca:	08 95       	ret

000015cc <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    15cc:	df 93       	push	r29
    15ce:	cf 93       	push	r28
    15d0:	00 d0       	rcall	.+0      	; 0x15d2 <GPIO_writePin+0x6>
    15d2:	00 d0       	rcall	.+0      	; 0x15d4 <GPIO_writePin+0x8>
    15d4:	0f 92       	push	r0
    15d6:	cd b7       	in	r28, 0x3d	; 61
    15d8:	de b7       	in	r29, 0x3e	; 62
    15da:	89 83       	std	Y+1, r24	; 0x01
    15dc:	6a 83       	std	Y+2, r22	; 0x02
    15de:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    15e0:	8a 81       	ldd	r24, Y+2	; 0x02
    15e2:	88 30       	cpi	r24, 0x08	; 8
    15e4:	08 f0       	brcs	.+2      	; 0x15e8 <GPIO_writePin+0x1c>
    15e6:	d5 c0       	rjmp	.+426    	; 0x1792 <GPIO_writePin+0x1c6>
    15e8:	89 81       	ldd	r24, Y+1	; 0x01
    15ea:	84 30       	cpi	r24, 0x04	; 4
    15ec:	08 f0       	brcs	.+2      	; 0x15f0 <GPIO_writePin+0x24>
    15ee:	d1 c0       	rjmp	.+418    	; 0x1792 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
    15f2:	28 2f       	mov	r18, r24
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	3d 83       	std	Y+5, r19	; 0x05
    15f8:	2c 83       	std	Y+4, r18	; 0x04
    15fa:	8c 81       	ldd	r24, Y+4	; 0x04
    15fc:	9d 81       	ldd	r25, Y+5	; 0x05
    15fe:	81 30       	cpi	r24, 0x01	; 1
    1600:	91 05       	cpc	r25, r1
    1602:	09 f4       	brne	.+2      	; 0x1606 <GPIO_writePin+0x3a>
    1604:	43 c0       	rjmp	.+134    	; 0x168c <GPIO_writePin+0xc0>
    1606:	2c 81       	ldd	r18, Y+4	; 0x04
    1608:	3d 81       	ldd	r19, Y+5	; 0x05
    160a:	22 30       	cpi	r18, 0x02	; 2
    160c:	31 05       	cpc	r19, r1
    160e:	2c f4       	brge	.+10     	; 0x161a <GPIO_writePin+0x4e>
    1610:	8c 81       	ldd	r24, Y+4	; 0x04
    1612:	9d 81       	ldd	r25, Y+5	; 0x05
    1614:	00 97       	sbiw	r24, 0x00	; 0
    1616:	71 f0       	breq	.+28     	; 0x1634 <GPIO_writePin+0x68>
    1618:	bc c0       	rjmp	.+376    	; 0x1792 <GPIO_writePin+0x1c6>
    161a:	2c 81       	ldd	r18, Y+4	; 0x04
    161c:	3d 81       	ldd	r19, Y+5	; 0x05
    161e:	22 30       	cpi	r18, 0x02	; 2
    1620:	31 05       	cpc	r19, r1
    1622:	09 f4       	brne	.+2      	; 0x1626 <GPIO_writePin+0x5a>
    1624:	5f c0       	rjmp	.+190    	; 0x16e4 <GPIO_writePin+0x118>
    1626:	8c 81       	ldd	r24, Y+4	; 0x04
    1628:	9d 81       	ldd	r25, Y+5	; 0x05
    162a:	83 30       	cpi	r24, 0x03	; 3
    162c:	91 05       	cpc	r25, r1
    162e:	09 f4       	brne	.+2      	; 0x1632 <GPIO_writePin+0x66>
    1630:	85 c0       	rjmp	.+266    	; 0x173c <GPIO_writePin+0x170>
    1632:	af c0       	rjmp	.+350    	; 0x1792 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1634:	8b 81       	ldd	r24, Y+3	; 0x03
    1636:	81 30       	cpi	r24, 0x01	; 1
    1638:	a1 f4       	brne	.+40     	; 0x1662 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    163a:	ab e3       	ldi	r26, 0x3B	; 59
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	eb e3       	ldi	r30, 0x3B	; 59
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	48 2f       	mov	r20, r24
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	28 2f       	mov	r18, r24
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	02 2e       	mov	r0, r18
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <GPIO_writePin+0x8c>
    1654:	88 0f       	add	r24, r24
    1656:	99 1f       	adc	r25, r25
    1658:	0a 94       	dec	r0
    165a:	e2 f7       	brpl	.-8      	; 0x1654 <GPIO_writePin+0x88>
    165c:	84 2b       	or	r24, r20
    165e:	8c 93       	st	X, r24
    1660:	98 c0       	rjmp	.+304    	; 0x1792 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1662:	ab e3       	ldi	r26, 0x3B	; 59
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	eb e3       	ldi	r30, 0x3B	; 59
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	48 2f       	mov	r20, r24
    166e:	8a 81       	ldd	r24, Y+2	; 0x02
    1670:	28 2f       	mov	r18, r24
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	02 2e       	mov	r0, r18
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <GPIO_writePin+0xb4>
    167c:	88 0f       	add	r24, r24
    167e:	99 1f       	adc	r25, r25
    1680:	0a 94       	dec	r0
    1682:	e2 f7       	brpl	.-8      	; 0x167c <GPIO_writePin+0xb0>
    1684:	80 95       	com	r24
    1686:	84 23       	and	r24, r20
    1688:	8c 93       	st	X, r24
    168a:	83 c0       	rjmp	.+262    	; 0x1792 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    168c:	8b 81       	ldd	r24, Y+3	; 0x03
    168e:	81 30       	cpi	r24, 0x01	; 1
    1690:	a1 f4       	brne	.+40     	; 0x16ba <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1692:	a8 e3       	ldi	r26, 0x38	; 56
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	e8 e3       	ldi	r30, 0x38	; 56
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	48 2f       	mov	r20, r24
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
    16a0:	28 2f       	mov	r18, r24
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	02 2e       	mov	r0, r18
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <GPIO_writePin+0xe4>
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	0a 94       	dec	r0
    16b2:	e2 f7       	brpl	.-8      	; 0x16ac <GPIO_writePin+0xe0>
    16b4:	84 2b       	or	r24, r20
    16b6:	8c 93       	st	X, r24
    16b8:	6c c0       	rjmp	.+216    	; 0x1792 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    16ba:	a8 e3       	ldi	r26, 0x38	; 56
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	e8 e3       	ldi	r30, 0x38	; 56
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	48 2f       	mov	r20, r24
    16c6:	8a 81       	ldd	r24, Y+2	; 0x02
    16c8:	28 2f       	mov	r18, r24
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	02 2e       	mov	r0, r18
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <GPIO_writePin+0x10c>
    16d4:	88 0f       	add	r24, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	0a 94       	dec	r0
    16da:	e2 f7       	brpl	.-8      	; 0x16d4 <GPIO_writePin+0x108>
    16dc:	80 95       	com	r24
    16de:	84 23       	and	r24, r20
    16e0:	8c 93       	st	X, r24
    16e2:	57 c0       	rjmp	.+174    	; 0x1792 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    16e4:	8b 81       	ldd	r24, Y+3	; 0x03
    16e6:	81 30       	cpi	r24, 0x01	; 1
    16e8:	a1 f4       	brne	.+40     	; 0x1712 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    16ea:	a5 e3       	ldi	r26, 0x35	; 53
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	e5 e3       	ldi	r30, 0x35	; 53
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	48 2f       	mov	r20, r24
    16f6:	8a 81       	ldd	r24, Y+2	; 0x02
    16f8:	28 2f       	mov	r18, r24
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	02 2e       	mov	r0, r18
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <GPIO_writePin+0x13c>
    1704:	88 0f       	add	r24, r24
    1706:	99 1f       	adc	r25, r25
    1708:	0a 94       	dec	r0
    170a:	e2 f7       	brpl	.-8      	; 0x1704 <GPIO_writePin+0x138>
    170c:	84 2b       	or	r24, r20
    170e:	8c 93       	st	X, r24
    1710:	40 c0       	rjmp	.+128    	; 0x1792 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1712:	a5 e3       	ldi	r26, 0x35	; 53
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	e5 e3       	ldi	r30, 0x35	; 53
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	48 2f       	mov	r20, r24
    171e:	8a 81       	ldd	r24, Y+2	; 0x02
    1720:	28 2f       	mov	r18, r24
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	02 2e       	mov	r0, r18
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <GPIO_writePin+0x164>
    172c:	88 0f       	add	r24, r24
    172e:	99 1f       	adc	r25, r25
    1730:	0a 94       	dec	r0
    1732:	e2 f7       	brpl	.-8      	; 0x172c <GPIO_writePin+0x160>
    1734:	80 95       	com	r24
    1736:	84 23       	and	r24, r20
    1738:	8c 93       	st	X, r24
    173a:	2b c0       	rjmp	.+86     	; 0x1792 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    173c:	8b 81       	ldd	r24, Y+3	; 0x03
    173e:	81 30       	cpi	r24, 0x01	; 1
    1740:	a1 f4       	brne	.+40     	; 0x176a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1742:	a2 e3       	ldi	r26, 0x32	; 50
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	e2 e3       	ldi	r30, 0x32	; 50
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	48 2f       	mov	r20, r24
    174e:	8a 81       	ldd	r24, Y+2	; 0x02
    1750:	28 2f       	mov	r18, r24
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	02 2e       	mov	r0, r18
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <GPIO_writePin+0x194>
    175c:	88 0f       	add	r24, r24
    175e:	99 1f       	adc	r25, r25
    1760:	0a 94       	dec	r0
    1762:	e2 f7       	brpl	.-8      	; 0x175c <GPIO_writePin+0x190>
    1764:	84 2b       	or	r24, r20
    1766:	8c 93       	st	X, r24
    1768:	14 c0       	rjmp	.+40     	; 0x1792 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    176a:	a2 e3       	ldi	r26, 0x32	; 50
    176c:	b0 e0       	ldi	r27, 0x00	; 0
    176e:	e2 e3       	ldi	r30, 0x32	; 50
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	80 81       	ld	r24, Z
    1774:	48 2f       	mov	r20, r24
    1776:	8a 81       	ldd	r24, Y+2	; 0x02
    1778:	28 2f       	mov	r18, r24
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	02 2e       	mov	r0, r18
    1782:	02 c0       	rjmp	.+4      	; 0x1788 <GPIO_writePin+0x1bc>
    1784:	88 0f       	add	r24, r24
    1786:	99 1f       	adc	r25, r25
    1788:	0a 94       	dec	r0
    178a:	e2 f7       	brpl	.-8      	; 0x1784 <GPIO_writePin+0x1b8>
    178c:	80 95       	com	r24
    178e:	84 23       	and	r24, r20
    1790:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1792:	0f 90       	pop	r0
    1794:	0f 90       	pop	r0
    1796:	0f 90       	pop	r0
    1798:	0f 90       	pop	r0
    179a:	0f 90       	pop	r0
    179c:	cf 91       	pop	r28
    179e:	df 91       	pop	r29
    17a0:	08 95       	ret

000017a2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    17a2:	df 93       	push	r29
    17a4:	cf 93       	push	r28
    17a6:	00 d0       	rcall	.+0      	; 0x17a8 <GPIO_readPin+0x6>
    17a8:	00 d0       	rcall	.+0      	; 0x17aa <GPIO_readPin+0x8>
    17aa:	0f 92       	push	r0
    17ac:	cd b7       	in	r28, 0x3d	; 61
    17ae:	de b7       	in	r29, 0x3e	; 62
    17b0:	8a 83       	std	Y+2, r24	; 0x02
    17b2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    17b4:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    17b6:	8b 81       	ldd	r24, Y+3	; 0x03
    17b8:	88 30       	cpi	r24, 0x08	; 8
    17ba:	08 f0       	brcs	.+2      	; 0x17be <GPIO_readPin+0x1c>
    17bc:	84 c0       	rjmp	.+264    	; 0x18c6 <GPIO_readPin+0x124>
    17be:	8a 81       	ldd	r24, Y+2	; 0x02
    17c0:	84 30       	cpi	r24, 0x04	; 4
    17c2:	08 f0       	brcs	.+2      	; 0x17c6 <GPIO_readPin+0x24>
    17c4:	80 c0       	rjmp	.+256    	; 0x18c6 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    17c6:	8a 81       	ldd	r24, Y+2	; 0x02
    17c8:	28 2f       	mov	r18, r24
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	3d 83       	std	Y+5, r19	; 0x05
    17ce:	2c 83       	std	Y+4, r18	; 0x04
    17d0:	4c 81       	ldd	r20, Y+4	; 0x04
    17d2:	5d 81       	ldd	r21, Y+5	; 0x05
    17d4:	41 30       	cpi	r20, 0x01	; 1
    17d6:	51 05       	cpc	r21, r1
    17d8:	79 f1       	breq	.+94     	; 0x1838 <GPIO_readPin+0x96>
    17da:	8c 81       	ldd	r24, Y+4	; 0x04
    17dc:	9d 81       	ldd	r25, Y+5	; 0x05
    17de:	82 30       	cpi	r24, 0x02	; 2
    17e0:	91 05       	cpc	r25, r1
    17e2:	34 f4       	brge	.+12     	; 0x17f0 <GPIO_readPin+0x4e>
    17e4:	2c 81       	ldd	r18, Y+4	; 0x04
    17e6:	3d 81       	ldd	r19, Y+5	; 0x05
    17e8:	21 15       	cp	r18, r1
    17ea:	31 05       	cpc	r19, r1
    17ec:	69 f0       	breq	.+26     	; 0x1808 <GPIO_readPin+0x66>
    17ee:	6b c0       	rjmp	.+214    	; 0x18c6 <GPIO_readPin+0x124>
    17f0:	4c 81       	ldd	r20, Y+4	; 0x04
    17f2:	5d 81       	ldd	r21, Y+5	; 0x05
    17f4:	42 30       	cpi	r20, 0x02	; 2
    17f6:	51 05       	cpc	r21, r1
    17f8:	b9 f1       	breq	.+110    	; 0x1868 <GPIO_readPin+0xc6>
    17fa:	8c 81       	ldd	r24, Y+4	; 0x04
    17fc:	9d 81       	ldd	r25, Y+5	; 0x05
    17fe:	83 30       	cpi	r24, 0x03	; 3
    1800:	91 05       	cpc	r25, r1
    1802:	09 f4       	brne	.+2      	; 0x1806 <GPIO_readPin+0x64>
    1804:	49 c0       	rjmp	.+146    	; 0x1898 <GPIO_readPin+0xf6>
    1806:	5f c0       	rjmp	.+190    	; 0x18c6 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1808:	e9 e3       	ldi	r30, 0x39	; 57
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	28 2f       	mov	r18, r24
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	8b 81       	ldd	r24, Y+3	; 0x03
    1814:	88 2f       	mov	r24, r24
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	a9 01       	movw	r20, r18
    181a:	02 c0       	rjmp	.+4      	; 0x1820 <GPIO_readPin+0x7e>
    181c:	55 95       	asr	r21
    181e:	47 95       	ror	r20
    1820:	8a 95       	dec	r24
    1822:	e2 f7       	brpl	.-8      	; 0x181c <GPIO_readPin+0x7a>
    1824:	ca 01       	movw	r24, r20
    1826:	81 70       	andi	r24, 0x01	; 1
    1828:	90 70       	andi	r25, 0x00	; 0
    182a:	88 23       	and	r24, r24
    182c:	19 f0       	breq	.+6      	; 0x1834 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	89 83       	std	Y+1, r24	; 0x01
    1832:	49 c0       	rjmp	.+146    	; 0x18c6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1834:	19 82       	std	Y+1, r1	; 0x01
    1836:	47 c0       	rjmp	.+142    	; 0x18c6 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1838:	e6 e3       	ldi	r30, 0x36	; 54
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	28 2f       	mov	r18, r24
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	8b 81       	ldd	r24, Y+3	; 0x03
    1844:	88 2f       	mov	r24, r24
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	a9 01       	movw	r20, r18
    184a:	02 c0       	rjmp	.+4      	; 0x1850 <GPIO_readPin+0xae>
    184c:	55 95       	asr	r21
    184e:	47 95       	ror	r20
    1850:	8a 95       	dec	r24
    1852:	e2 f7       	brpl	.-8      	; 0x184c <GPIO_readPin+0xaa>
    1854:	ca 01       	movw	r24, r20
    1856:	81 70       	andi	r24, 0x01	; 1
    1858:	90 70       	andi	r25, 0x00	; 0
    185a:	88 23       	and	r24, r24
    185c:	19 f0       	breq	.+6      	; 0x1864 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	89 83       	std	Y+1, r24	; 0x01
    1862:	31 c0       	rjmp	.+98     	; 0x18c6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1864:	19 82       	std	Y+1, r1	; 0x01
    1866:	2f c0       	rjmp	.+94     	; 0x18c6 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1868:	e3 e3       	ldi	r30, 0x33	; 51
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	28 2f       	mov	r18, r24
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	8b 81       	ldd	r24, Y+3	; 0x03
    1874:	88 2f       	mov	r24, r24
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	a9 01       	movw	r20, r18
    187a:	02 c0       	rjmp	.+4      	; 0x1880 <GPIO_readPin+0xde>
    187c:	55 95       	asr	r21
    187e:	47 95       	ror	r20
    1880:	8a 95       	dec	r24
    1882:	e2 f7       	brpl	.-8      	; 0x187c <GPIO_readPin+0xda>
    1884:	ca 01       	movw	r24, r20
    1886:	81 70       	andi	r24, 0x01	; 1
    1888:	90 70       	andi	r25, 0x00	; 0
    188a:	88 23       	and	r24, r24
    188c:	19 f0       	breq	.+6      	; 0x1894 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	89 83       	std	Y+1, r24	; 0x01
    1892:	19 c0       	rjmp	.+50     	; 0x18c6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1894:	19 82       	std	Y+1, r1	; 0x01
    1896:	17 c0       	rjmp	.+46     	; 0x18c6 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1898:	e0 e3       	ldi	r30, 0x30	; 48
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	28 2f       	mov	r18, r24
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	8b 81       	ldd	r24, Y+3	; 0x03
    18a4:	88 2f       	mov	r24, r24
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	a9 01       	movw	r20, r18
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <GPIO_readPin+0x10e>
    18ac:	55 95       	asr	r21
    18ae:	47 95       	ror	r20
    18b0:	8a 95       	dec	r24
    18b2:	e2 f7       	brpl	.-8      	; 0x18ac <GPIO_readPin+0x10a>
    18b4:	ca 01       	movw	r24, r20
    18b6:	81 70       	andi	r24, 0x01	; 1
    18b8:	90 70       	andi	r25, 0x00	; 0
    18ba:	88 23       	and	r24, r24
    18bc:	19 f0       	breq	.+6      	; 0x18c4 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	89 83       	std	Y+1, r24	; 0x01
    18c2:	01 c0       	rjmp	.+2      	; 0x18c6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18c4:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    18c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    18c8:	0f 90       	pop	r0
    18ca:	0f 90       	pop	r0
    18cc:	0f 90       	pop	r0
    18ce:	0f 90       	pop	r0
    18d0:	0f 90       	pop	r0
    18d2:	cf 91       	pop	r28
    18d4:	df 91       	pop	r29
    18d6:	08 95       	ret

000018d8 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    18d8:	df 93       	push	r29
    18da:	cf 93       	push	r28
    18dc:	00 d0       	rcall	.+0      	; 0x18de <GPIO_setupPortDirection+0x6>
    18de:	00 d0       	rcall	.+0      	; 0x18e0 <GPIO_setupPortDirection+0x8>
    18e0:	cd b7       	in	r28, 0x3d	; 61
    18e2:	de b7       	in	r29, 0x3e	; 62
    18e4:	89 83       	std	Y+1, r24	; 0x01
    18e6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    18e8:	89 81       	ldd	r24, Y+1	; 0x01
    18ea:	84 30       	cpi	r24, 0x04	; 4
    18ec:	90 f5       	brcc	.+100    	; 0x1952 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    18ee:	89 81       	ldd	r24, Y+1	; 0x01
    18f0:	28 2f       	mov	r18, r24
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	3c 83       	std	Y+4, r19	; 0x04
    18f6:	2b 83       	std	Y+3, r18	; 0x03
    18f8:	8b 81       	ldd	r24, Y+3	; 0x03
    18fa:	9c 81       	ldd	r25, Y+4	; 0x04
    18fc:	81 30       	cpi	r24, 0x01	; 1
    18fe:	91 05       	cpc	r25, r1
    1900:	d1 f0       	breq	.+52     	; 0x1936 <GPIO_setupPortDirection+0x5e>
    1902:	2b 81       	ldd	r18, Y+3	; 0x03
    1904:	3c 81       	ldd	r19, Y+4	; 0x04
    1906:	22 30       	cpi	r18, 0x02	; 2
    1908:	31 05       	cpc	r19, r1
    190a:	2c f4       	brge	.+10     	; 0x1916 <GPIO_setupPortDirection+0x3e>
    190c:	8b 81       	ldd	r24, Y+3	; 0x03
    190e:	9c 81       	ldd	r25, Y+4	; 0x04
    1910:	00 97       	sbiw	r24, 0x00	; 0
    1912:	61 f0       	breq	.+24     	; 0x192c <GPIO_setupPortDirection+0x54>
    1914:	1e c0       	rjmp	.+60     	; 0x1952 <GPIO_setupPortDirection+0x7a>
    1916:	2b 81       	ldd	r18, Y+3	; 0x03
    1918:	3c 81       	ldd	r19, Y+4	; 0x04
    191a:	22 30       	cpi	r18, 0x02	; 2
    191c:	31 05       	cpc	r19, r1
    191e:	81 f0       	breq	.+32     	; 0x1940 <GPIO_setupPortDirection+0x68>
    1920:	8b 81       	ldd	r24, Y+3	; 0x03
    1922:	9c 81       	ldd	r25, Y+4	; 0x04
    1924:	83 30       	cpi	r24, 0x03	; 3
    1926:	91 05       	cpc	r25, r1
    1928:	81 f0       	breq	.+32     	; 0x194a <GPIO_setupPortDirection+0x72>
    192a:	13 c0       	rjmp	.+38     	; 0x1952 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    192c:	ea e3       	ldi	r30, 0x3A	; 58
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	8a 81       	ldd	r24, Y+2	; 0x02
    1932:	80 83       	st	Z, r24
    1934:	0e c0       	rjmp	.+28     	; 0x1952 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1936:	e7 e3       	ldi	r30, 0x37	; 55
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	8a 81       	ldd	r24, Y+2	; 0x02
    193c:	80 83       	st	Z, r24
    193e:	09 c0       	rjmp	.+18     	; 0x1952 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1940:	e4 e3       	ldi	r30, 0x34	; 52
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	8a 81       	ldd	r24, Y+2	; 0x02
    1946:	80 83       	st	Z, r24
    1948:	04 c0       	rjmp	.+8      	; 0x1952 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    194a:	e1 e3       	ldi	r30, 0x31	; 49
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	8a 81       	ldd	r24, Y+2	; 0x02
    1950:	80 83       	st	Z, r24
			break;
		}
	}
}
    1952:	0f 90       	pop	r0
    1954:	0f 90       	pop	r0
    1956:	0f 90       	pop	r0
    1958:	0f 90       	pop	r0
    195a:	cf 91       	pop	r28
    195c:	df 91       	pop	r29
    195e:	08 95       	ret

00001960 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1960:	df 93       	push	r29
    1962:	cf 93       	push	r28
    1964:	00 d0       	rcall	.+0      	; 0x1966 <GPIO_writePort+0x6>
    1966:	00 d0       	rcall	.+0      	; 0x1968 <GPIO_writePort+0x8>
    1968:	cd b7       	in	r28, 0x3d	; 61
    196a:	de b7       	in	r29, 0x3e	; 62
    196c:	89 83       	std	Y+1, r24	; 0x01
    196e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1970:	89 81       	ldd	r24, Y+1	; 0x01
    1972:	84 30       	cpi	r24, 0x04	; 4
    1974:	90 f5       	brcc	.+100    	; 0x19da <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1976:	89 81       	ldd	r24, Y+1	; 0x01
    1978:	28 2f       	mov	r18, r24
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	3c 83       	std	Y+4, r19	; 0x04
    197e:	2b 83       	std	Y+3, r18	; 0x03
    1980:	8b 81       	ldd	r24, Y+3	; 0x03
    1982:	9c 81       	ldd	r25, Y+4	; 0x04
    1984:	81 30       	cpi	r24, 0x01	; 1
    1986:	91 05       	cpc	r25, r1
    1988:	d1 f0       	breq	.+52     	; 0x19be <GPIO_writePort+0x5e>
    198a:	2b 81       	ldd	r18, Y+3	; 0x03
    198c:	3c 81       	ldd	r19, Y+4	; 0x04
    198e:	22 30       	cpi	r18, 0x02	; 2
    1990:	31 05       	cpc	r19, r1
    1992:	2c f4       	brge	.+10     	; 0x199e <GPIO_writePort+0x3e>
    1994:	8b 81       	ldd	r24, Y+3	; 0x03
    1996:	9c 81       	ldd	r25, Y+4	; 0x04
    1998:	00 97       	sbiw	r24, 0x00	; 0
    199a:	61 f0       	breq	.+24     	; 0x19b4 <GPIO_writePort+0x54>
    199c:	1e c0       	rjmp	.+60     	; 0x19da <GPIO_writePort+0x7a>
    199e:	2b 81       	ldd	r18, Y+3	; 0x03
    19a0:	3c 81       	ldd	r19, Y+4	; 0x04
    19a2:	22 30       	cpi	r18, 0x02	; 2
    19a4:	31 05       	cpc	r19, r1
    19a6:	81 f0       	breq	.+32     	; 0x19c8 <GPIO_writePort+0x68>
    19a8:	8b 81       	ldd	r24, Y+3	; 0x03
    19aa:	9c 81       	ldd	r25, Y+4	; 0x04
    19ac:	83 30       	cpi	r24, 0x03	; 3
    19ae:	91 05       	cpc	r25, r1
    19b0:	81 f0       	breq	.+32     	; 0x19d2 <GPIO_writePort+0x72>
    19b2:	13 c0       	rjmp	.+38     	; 0x19da <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    19b4:	eb e3       	ldi	r30, 0x3B	; 59
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ba:	80 83       	st	Z, r24
    19bc:	0e c0       	rjmp	.+28     	; 0x19da <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    19be:	e8 e3       	ldi	r30, 0x38	; 56
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	8a 81       	ldd	r24, Y+2	; 0x02
    19c4:	80 83       	st	Z, r24
    19c6:	09 c0       	rjmp	.+18     	; 0x19da <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    19c8:	e5 e3       	ldi	r30, 0x35	; 53
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	8a 81       	ldd	r24, Y+2	; 0x02
    19ce:	80 83       	st	Z, r24
    19d0:	04 c0       	rjmp	.+8      	; 0x19da <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    19d2:	e2 e3       	ldi	r30, 0x32	; 50
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	8a 81       	ldd	r24, Y+2	; 0x02
    19d8:	80 83       	st	Z, r24
			break;
		}
	}
}
    19da:	0f 90       	pop	r0
    19dc:	0f 90       	pop	r0
    19de:	0f 90       	pop	r0
    19e0:	0f 90       	pop	r0
    19e2:	cf 91       	pop	r28
    19e4:	df 91       	pop	r29
    19e6:	08 95       	ret

000019e8 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    19e8:	df 93       	push	r29
    19ea:	cf 93       	push	r28
    19ec:	00 d0       	rcall	.+0      	; 0x19ee <GPIO_readPort+0x6>
    19ee:	00 d0       	rcall	.+0      	; 0x19f0 <GPIO_readPort+0x8>
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
    19f4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    19f6:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    19f8:	8a 81       	ldd	r24, Y+2	; 0x02
    19fa:	84 30       	cpi	r24, 0x04	; 4
    19fc:	90 f5       	brcc	.+100    	; 0x1a62 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    19fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1a00:	28 2f       	mov	r18, r24
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	3c 83       	std	Y+4, r19	; 0x04
    1a06:	2b 83       	std	Y+3, r18	; 0x03
    1a08:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0c:	81 30       	cpi	r24, 0x01	; 1
    1a0e:	91 05       	cpc	r25, r1
    1a10:	d1 f0       	breq	.+52     	; 0x1a46 <GPIO_readPort+0x5e>
    1a12:	2b 81       	ldd	r18, Y+3	; 0x03
    1a14:	3c 81       	ldd	r19, Y+4	; 0x04
    1a16:	22 30       	cpi	r18, 0x02	; 2
    1a18:	31 05       	cpc	r19, r1
    1a1a:	2c f4       	brge	.+10     	; 0x1a26 <GPIO_readPort+0x3e>
    1a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a20:	00 97       	sbiw	r24, 0x00	; 0
    1a22:	61 f0       	breq	.+24     	; 0x1a3c <GPIO_readPort+0x54>
    1a24:	1e c0       	rjmp	.+60     	; 0x1a62 <GPIO_readPort+0x7a>
    1a26:	2b 81       	ldd	r18, Y+3	; 0x03
    1a28:	3c 81       	ldd	r19, Y+4	; 0x04
    1a2a:	22 30       	cpi	r18, 0x02	; 2
    1a2c:	31 05       	cpc	r19, r1
    1a2e:	81 f0       	breq	.+32     	; 0x1a50 <GPIO_readPort+0x68>
    1a30:	8b 81       	ldd	r24, Y+3	; 0x03
    1a32:	9c 81       	ldd	r25, Y+4	; 0x04
    1a34:	83 30       	cpi	r24, 0x03	; 3
    1a36:	91 05       	cpc	r25, r1
    1a38:	81 f0       	breq	.+32     	; 0x1a5a <GPIO_readPort+0x72>
    1a3a:	13 c0       	rjmp	.+38     	; 0x1a62 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1a3c:	e9 e3       	ldi	r30, 0x39	; 57
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	89 83       	std	Y+1, r24	; 0x01
    1a44:	0e c0       	rjmp	.+28     	; 0x1a62 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1a46:	e6 e3       	ldi	r30, 0x36	; 54
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	89 83       	std	Y+1, r24	; 0x01
    1a4e:	09 c0       	rjmp	.+18     	; 0x1a62 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1a50:	e3 e3       	ldi	r30, 0x33	; 51
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	80 81       	ld	r24, Z
    1a56:	89 83       	std	Y+1, r24	; 0x01
    1a58:	04 c0       	rjmp	.+8      	; 0x1a62 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1a5a:	e0 e3       	ldi	r30, 0x30	; 48
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1a62:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a64:	0f 90       	pop	r0
    1a66:	0f 90       	pop	r0
    1a68:	0f 90       	pop	r0
    1a6a:	0f 90       	pop	r0
    1a6c:	cf 91       	pop	r28
    1a6e:	df 91       	pop	r29
    1a70:	08 95       	ret

00001a72 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1a72:	df 93       	push	r29
    1a74:	cf 93       	push	r28
    1a76:	00 d0       	rcall	.+0      	; 0x1a78 <KEYPAD_getPressedKey+0x6>
    1a78:	cd b7       	in	r28, 0x3d	; 61
    1a7a:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1a7c:	80 e0       	ldi	r24, 0x00	; 0
    1a7e:	60 e0       	ldi	r22, 0x00	; 0
    1a80:	40 e0       	ldi	r20, 0x00	; 0
    1a82:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1a86:	80 e0       	ldi	r24, 0x00	; 0
    1a88:	61 e0       	ldi	r22, 0x01	; 1
    1a8a:	40 e0       	ldi	r20, 0x00	; 0
    1a8c:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	62 e0       	ldi	r22, 0x02	; 2
    1a94:	40 e0       	ldi	r20, 0x00	; 0
    1a96:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	63 e0       	ldi	r22, 0x03	; 3
    1a9e:	40 e0       	ldi	r20, 0x00	; 0
    1aa0:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	64 e0       	ldi	r22, 0x04	; 4
    1aa8:	40 e0       	ldi	r20, 0x00	; 0
    1aaa:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1aae:	80 e0       	ldi	r24, 0x00	; 0
    1ab0:	65 e0       	ldi	r22, 0x05	; 5
    1ab2:	40 e0       	ldi	r20, 0x00	; 0
    1ab4:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	66 e0       	ldi	r22, 0x06	; 6
    1abc:	40 e0       	ldi	r20, 0x00	; 0
    1abe:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	67 e0       	ldi	r22, 0x07	; 7
    1ac6:	40 e0       	ldi	r20, 0x00	; 0
    1ac8:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1acc:	19 82       	std	Y+1, r1	; 0x01
    1ace:	35 c0       	rjmp	.+106    	; 0x1b3a <KEYPAD_getPressedKey+0xc8>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	69 81       	ldd	r22, Y+1	; 0x01
    1ad4:	41 e0       	ldi	r20, 0x01	; 1
    1ad6:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1ada:	80 e0       	ldi	r24, 0x00	; 0
    1adc:	69 81       	ldd	r22, Y+1	; 0x01
    1ade:	40 e0       	ldi	r20, 0x00	; 0
    1ae0:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1ae4:	1a 82       	std	Y+2, r1	; 0x02
    1ae6:	1e c0       	rjmp	.+60     	; 0x1b24 <KEYPAD_getPressedKey+0xb2>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aea:	98 2f       	mov	r25, r24
    1aec:	9c 5f       	subi	r25, 0xFC	; 252
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	69 2f       	mov	r22, r25
    1af2:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <GPIO_readPin>
    1af6:	88 23       	and	r24, r24
    1af8:	91 f4       	brne	.+36     	; 0x1b1e <KEYPAD_getPressedKey+0xac>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1afa:	89 81       	ldd	r24, Y+1	; 0x01
    1afc:	88 2f       	mov	r24, r24
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	88 0f       	add	r24, r24
    1b02:	99 1f       	adc	r25, r25
    1b04:	88 0f       	add	r24, r24
    1b06:	99 1f       	adc	r25, r25
    1b08:	98 2f       	mov	r25, r24
    1b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0c:	89 0f       	add	r24, r25
    1b0e:	8f 5f       	subi	r24, 0xFF	; 255
    1b10:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <KEYPAD_4x4_adjustKeyNumber>
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}	
}
    1b14:	0f 90       	pop	r0
    1b16:	0f 90       	pop	r0
    1b18:	cf 91       	pop	r28
    1b1a:	df 91       	pop	r29
    1b1c:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b20:	8f 5f       	subi	r24, 0xFF	; 255
    1b22:	8a 83       	std	Y+2, r24	; 0x02
    1b24:	8a 81       	ldd	r24, Y+2	; 0x02
    1b26:	84 30       	cpi	r24, 0x04	; 4
    1b28:	f8 f2       	brcs	.-66     	; 0x1ae8 <KEYPAD_getPressedKey+0x76>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1b2a:	80 e0       	ldi	r24, 0x00	; 0
    1b2c:	69 81       	ldd	r22, Y+1	; 0x01
    1b2e:	40 e0       	ldi	r20, 0x00	; 0
    1b30:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
    1b36:	8f 5f       	subi	r24, 0xFF	; 255
    1b38:	89 83       	std	Y+1, r24	; 0x01
    1b3a:	89 81       	ldd	r24, Y+1	; 0x01
    1b3c:	84 30       	cpi	r24, 0x04	; 4
    1b3e:	40 f2       	brcs	.-112    	; 0x1ad0 <KEYPAD_getPressedKey+0x5e>
    1b40:	c5 cf       	rjmp	.-118    	; 0x1acc <KEYPAD_getPressedKey+0x5a>

00001b42 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1b42:	df 93       	push	r29
    1b44:	cf 93       	push	r28
    1b46:	00 d0       	rcall	.+0      	; 0x1b48 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1b48:	00 d0       	rcall	.+0      	; 0x1b4a <KEYPAD_4x4_adjustKeyNumber+0x8>
    1b4a:	cd b7       	in	r28, 0x3d	; 61
    1b4c:	de b7       	in	r29, 0x3e	; 62
    1b4e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1b50:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1b52:	8a 81       	ldd	r24, Y+2	; 0x02
    1b54:	28 2f       	mov	r18, r24
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	3c 83       	std	Y+4, r19	; 0x04
    1b5a:	2b 83       	std	Y+3, r18	; 0x03
    1b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b60:	88 30       	cpi	r24, 0x08	; 8
    1b62:	91 05       	cpc	r25, r1
    1b64:	09 f4       	brne	.+2      	; 0x1b68 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1b66:	70 c0       	rjmp	.+224    	; 0x1c48 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1b68:	2b 81       	ldd	r18, Y+3	; 0x03
    1b6a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b6c:	29 30       	cpi	r18, 0x09	; 9
    1b6e:	31 05       	cpc	r19, r1
    1b70:	5c f5       	brge	.+86     	; 0x1bc8 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1b72:	8b 81       	ldd	r24, Y+3	; 0x03
    1b74:	9c 81       	ldd	r25, Y+4	; 0x04
    1b76:	84 30       	cpi	r24, 0x04	; 4
    1b78:	91 05       	cpc	r25, r1
    1b7a:	09 f4       	brne	.+2      	; 0x1b7e <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1b7c:	59 c0       	rjmp	.+178    	; 0x1c30 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1b7e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b80:	3c 81       	ldd	r19, Y+4	; 0x04
    1b82:	25 30       	cpi	r18, 0x05	; 5
    1b84:	31 05       	cpc	r19, r1
    1b86:	9c f4       	brge	.+38     	; 0x1bae <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1b88:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b8c:	82 30       	cpi	r24, 0x02	; 2
    1b8e:	91 05       	cpc	r25, r1
    1b90:	09 f4       	brne	.+2      	; 0x1b94 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1b92:	48 c0       	rjmp	.+144    	; 0x1c24 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1b94:	2b 81       	ldd	r18, Y+3	; 0x03
    1b96:	3c 81       	ldd	r19, Y+4	; 0x04
    1b98:	23 30       	cpi	r18, 0x03	; 3
    1b9a:	31 05       	cpc	r19, r1
    1b9c:	0c f0       	brlt	.+2      	; 0x1ba0 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1b9e:	45 c0       	rjmp	.+138    	; 0x1c2a <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba4:	81 30       	cpi	r24, 0x01	; 1
    1ba6:	91 05       	cpc	r25, r1
    1ba8:	09 f4       	brne	.+2      	; 0x1bac <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1baa:	39 c0       	rjmp	.+114    	; 0x1c1e <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1bac:	67 c0       	rjmp	.+206    	; 0x1c7c <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1bae:	2b 81       	ldd	r18, Y+3	; 0x03
    1bb0:	3c 81       	ldd	r19, Y+4	; 0x04
    1bb2:	26 30       	cpi	r18, 0x06	; 6
    1bb4:	31 05       	cpc	r19, r1
    1bb6:	09 f4       	brne	.+2      	; 0x1bba <KEYPAD_4x4_adjustKeyNumber+0x78>
    1bb8:	41 c0       	rjmp	.+130    	; 0x1c3c <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1bba:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bbe:	87 30       	cpi	r24, 0x07	; 7
    1bc0:	91 05       	cpc	r25, r1
    1bc2:	0c f0       	brlt	.+2      	; 0x1bc6 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1bc4:	3e c0       	rjmp	.+124    	; 0x1c42 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1bc6:	37 c0       	rjmp	.+110    	; 0x1c36 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1bc8:	2b 81       	ldd	r18, Y+3	; 0x03
    1bca:	3c 81       	ldd	r19, Y+4	; 0x04
    1bcc:	2c 30       	cpi	r18, 0x0C	; 12
    1bce:	31 05       	cpc	r19, r1
    1bd0:	09 f4       	brne	.+2      	; 0x1bd4 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1bd2:	46 c0       	rjmp	.+140    	; 0x1c60 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd8:	8d 30       	cpi	r24, 0x0D	; 13
    1bda:	91 05       	cpc	r25, r1
    1bdc:	5c f4       	brge	.+22     	; 0x1bf4 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1bde:	2b 81       	ldd	r18, Y+3	; 0x03
    1be0:	3c 81       	ldd	r19, Y+4	; 0x04
    1be2:	2a 30       	cpi	r18, 0x0A	; 10
    1be4:	31 05       	cpc	r19, r1
    1be6:	b1 f1       	breq	.+108    	; 0x1c54 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1be8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bea:	9c 81       	ldd	r25, Y+4	; 0x04
    1bec:	8b 30       	cpi	r24, 0x0B	; 11
    1bee:	91 05       	cpc	r25, r1
    1bf0:	a4 f5       	brge	.+104    	; 0x1c5a <KEYPAD_4x4_adjustKeyNumber+0x118>
    1bf2:	2d c0       	rjmp	.+90     	; 0x1c4e <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1bf4:	2b 81       	ldd	r18, Y+3	; 0x03
    1bf6:	3c 81       	ldd	r19, Y+4	; 0x04
    1bf8:	2e 30       	cpi	r18, 0x0E	; 14
    1bfa:	31 05       	cpc	r19, r1
    1bfc:	b9 f1       	breq	.+110    	; 0x1c6c <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1bfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1c00:	9c 81       	ldd	r25, Y+4	; 0x04
    1c02:	8e 30       	cpi	r24, 0x0E	; 14
    1c04:	91 05       	cpc	r25, r1
    1c06:	7c f1       	brlt	.+94     	; 0x1c66 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1c08:	2b 81       	ldd	r18, Y+3	; 0x03
    1c0a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c0c:	2f 30       	cpi	r18, 0x0F	; 15
    1c0e:	31 05       	cpc	r19, r1
    1c10:	79 f1       	breq	.+94     	; 0x1c70 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1c12:	8b 81       	ldd	r24, Y+3	; 0x03
    1c14:	9c 81       	ldd	r25, Y+4	; 0x04
    1c16:	80 31       	cpi	r24, 0x10	; 16
    1c18:	91 05       	cpc	r25, r1
    1c1a:	69 f1       	breq	.+90     	; 0x1c76 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1c1c:	2f c0       	rjmp	.+94     	; 0x1c7c <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1c1e:	87 e0       	ldi	r24, 0x07	; 7
    1c20:	89 83       	std	Y+1, r24	; 0x01
    1c22:	2e c0       	rjmp	.+92     	; 0x1c80 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1c24:	88 e0       	ldi	r24, 0x08	; 8
    1c26:	89 83       	std	Y+1, r24	; 0x01
    1c28:	2b c0       	rjmp	.+86     	; 0x1c80 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1c2a:	89 e0       	ldi	r24, 0x09	; 9
    1c2c:	89 83       	std	Y+1, r24	; 0x01
    1c2e:	28 c0       	rjmp	.+80     	; 0x1c80 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1c30:	85 e2       	ldi	r24, 0x25	; 37
    1c32:	89 83       	std	Y+1, r24	; 0x01
    1c34:	25 c0       	rjmp	.+74     	; 0x1c80 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1c36:	84 e0       	ldi	r24, 0x04	; 4
    1c38:	89 83       	std	Y+1, r24	; 0x01
    1c3a:	22 c0       	rjmp	.+68     	; 0x1c80 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1c3c:	85 e0       	ldi	r24, 0x05	; 5
    1c3e:	89 83       	std	Y+1, r24	; 0x01
    1c40:	1f c0       	rjmp	.+62     	; 0x1c80 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1c42:	86 e0       	ldi	r24, 0x06	; 6
    1c44:	89 83       	std	Y+1, r24	; 0x01
    1c46:	1c c0       	rjmp	.+56     	; 0x1c80 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1c48:	8a e2       	ldi	r24, 0x2A	; 42
    1c4a:	89 83       	std	Y+1, r24	; 0x01
    1c4c:	19 c0       	rjmp	.+50     	; 0x1c80 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	89 83       	std	Y+1, r24	; 0x01
    1c52:	16 c0       	rjmp	.+44     	; 0x1c80 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1c54:	82 e0       	ldi	r24, 0x02	; 2
    1c56:	89 83       	std	Y+1, r24	; 0x01
    1c58:	13 c0       	rjmp	.+38     	; 0x1c80 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1c5a:	83 e0       	ldi	r24, 0x03	; 3
    1c5c:	89 83       	std	Y+1, r24	; 0x01
    1c5e:	10 c0       	rjmp	.+32     	; 0x1c80 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1c60:	8d e2       	ldi	r24, 0x2D	; 45
    1c62:	89 83       	std	Y+1, r24	; 0x01
    1c64:	0d c0       	rjmp	.+26     	; 0x1c80 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1c66:	8d e0       	ldi	r24, 0x0D	; 13
    1c68:	89 83       	std	Y+1, r24	; 0x01
    1c6a:	0a c0       	rjmp	.+20     	; 0x1c80 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1c6c:	19 82       	std	Y+1, r1	; 0x01
    1c6e:	08 c0       	rjmp	.+16     	; 0x1c80 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1c70:	8d e3       	ldi	r24, 0x3D	; 61
    1c72:	89 83       	std	Y+1, r24	; 0x01
    1c74:	05 c0       	rjmp	.+10     	; 0x1c80 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1c76:	8b e2       	ldi	r24, 0x2B	; 43
    1c78:	89 83       	std	Y+1, r24	; 0x01
    1c7a:	02 c0       	rjmp	.+4      	; 0x1c80 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1c82:	0f 90       	pop	r0
    1c84:	0f 90       	pop	r0
    1c86:	0f 90       	pop	r0
    1c88:	0f 90       	pop	r0
    1c8a:	cf 91       	pop	r28
    1c8c:	df 91       	pop	r29
    1c8e:	08 95       	ret

00001c90 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1c90:	df 93       	push	r29
    1c92:	cf 93       	push	r28
    1c94:	cd b7       	in	r28, 0x3d	; 61
    1c96:	de b7       	in	r29, 0x3e	; 62
    1c98:	2e 97       	sbiw	r28, 0x0e	; 14
    1c9a:	0f b6       	in	r0, 0x3f	; 63
    1c9c:	f8 94       	cli
    1c9e:	de bf       	out	0x3e, r29	; 62
    1ca0:	0f be       	out	0x3f, r0	; 63
    1ca2:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS ,RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1ca4:	83 e0       	ldi	r24, 0x03	; 3
    1ca6:	62 e0       	ldi	r22, 0x02	; 2
    1ca8:	41 e0       	ldi	r20, 0x01	; 1
    1caa:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1cae:	83 e0       	ldi	r24, 0x03	; 3
    1cb0:	63 e0       	ldi	r22, 0x03	; 3
    1cb2:	41 e0       	ldi	r20, 0x01	; 1
    1cb4:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1cb8:	83 e0       	ldi	r24, 0x03	; 3
    1cba:	64 e0       	ldi	r22, 0x04	; 4
    1cbc:	41 e0       	ldi	r20, 0x01	; 1
    1cbe:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <GPIO_setupPinDirection>
    1cc2:	80 e0       	ldi	r24, 0x00	; 0
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	a0 ea       	ldi	r26, 0xA0	; 160
    1cc8:	b1 e4       	ldi	r27, 0x41	; 65
    1cca:	8b 87       	std	Y+11, r24	; 0x0b
    1ccc:	9c 87       	std	Y+12, r25	; 0x0c
    1cce:	ad 87       	std	Y+13, r26	; 0x0d
    1cd0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	4a e7       	ldi	r20, 0x7A	; 122
    1ce0:	53 e4       	ldi	r21, 0x43	; 67
    1ce2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	cb 01       	movw	r24, r22
    1cea:	8f 83       	std	Y+7, r24	; 0x07
    1cec:	98 87       	std	Y+8, r25	; 0x08
    1cee:	a9 87       	std	Y+9, r26	; 0x09
    1cf0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cf2:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf4:	78 85       	ldd	r23, Y+8	; 0x08
    1cf6:	89 85       	ldd	r24, Y+9	; 0x09
    1cf8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	40 e8       	ldi	r20, 0x80	; 128
    1d00:	5f e3       	ldi	r21, 0x3F	; 63
    1d02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d06:	88 23       	and	r24, r24
    1d08:	2c f4       	brge	.+10     	; 0x1d14 <LCD_init+0x84>
		__ticks = 1;
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	9e 83       	std	Y+6, r25	; 0x06
    1d10:	8d 83       	std	Y+5, r24	; 0x05
    1d12:	3f c0       	rjmp	.+126    	; 0x1d92 <LCD_init+0x102>
	else if (__tmp > 65535)
    1d14:	6f 81       	ldd	r22, Y+7	; 0x07
    1d16:	78 85       	ldd	r23, Y+8	; 0x08
    1d18:	89 85       	ldd	r24, Y+9	; 0x09
    1d1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	3f ef       	ldi	r19, 0xFF	; 255
    1d20:	4f e7       	ldi	r20, 0x7F	; 127
    1d22:	57 e4       	ldi	r21, 0x47	; 71
    1d24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d28:	18 16       	cp	r1, r24
    1d2a:	4c f5       	brge	.+82     	; 0x1d7e <LCD_init+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d30:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d32:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	40 e2       	ldi	r20, 0x20	; 32
    1d3a:	51 e4       	ldi	r21, 0x41	; 65
    1d3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	bc 01       	movw	r22, r24
    1d46:	cd 01       	movw	r24, r26
    1d48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	9e 83       	std	Y+6, r25	; 0x06
    1d52:	8d 83       	std	Y+5, r24	; 0x05
    1d54:	0f c0       	rjmp	.+30     	; 0x1d74 <LCD_init+0xe4>
    1d56:	89 e1       	ldi	r24, 0x19	; 25
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	9c 83       	std	Y+4, r25	; 0x04
    1d5c:	8b 83       	std	Y+3, r24	; 0x03
    1d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d60:	9c 81       	ldd	r25, Y+4	; 0x04
    1d62:	01 97       	sbiw	r24, 0x01	; 1
    1d64:	f1 f7       	brne	.-4      	; 0x1d62 <LCD_init+0xd2>
    1d66:	9c 83       	std	Y+4, r25	; 0x04
    1d68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d6e:	01 97       	sbiw	r24, 0x01	; 1
    1d70:	9e 83       	std	Y+6, r25	; 0x06
    1d72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d74:	8d 81       	ldd	r24, Y+5	; 0x05
    1d76:	9e 81       	ldd	r25, Y+6	; 0x06
    1d78:	00 97       	sbiw	r24, 0x00	; 0
    1d7a:	69 f7       	brne	.-38     	; 0x1d56 <LCD_init+0xc6>
    1d7c:	14 c0       	rjmp	.+40     	; 0x1da6 <LCD_init+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d80:	78 85       	ldd	r23, Y+8	; 0x08
    1d82:	89 85       	ldd	r24, Y+9	; 0x09
    1d84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	9e 83       	std	Y+6, r25	; 0x06
    1d90:	8d 83       	std	Y+5, r24	; 0x05
    1d92:	8d 81       	ldd	r24, Y+5	; 0x05
    1d94:	9e 81       	ldd	r25, Y+6	; 0x06
    1d96:	9a 83       	std	Y+2, r25	; 0x02
    1d98:	89 83       	std	Y+1, r24	; 0x01
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
    1d9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	f1 f7       	brne	.-4      	; 0x1d9e <LCD_init+0x10e>
    1da2:	9a 83       	std	Y+2, r25	; 0x02
    1da4:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* Instruction Mode RW=0 */
    1da6:	83 e0       	ldi	r24, 0x03	; 3
    1da8:	63 e0       	ldi	r22, 0x03	; 3
    1daa:	40 e0       	ldi	r20, 0x00	; 0
    1dac:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <GPIO_writePin>
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1db0:	82 e0       	ldi	r24, 0x02	; 2
    1db2:	6f ef       	ldi	r22, 0xFF	; 255
    1db4:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1db8:	88 e3       	ldi	r24, 0x38	; 56
    1dba:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1dbe:	8c e0       	ldi	r24, 0x0C	; 12
    1dc0:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <LCD_sendCommand>
}
    1dca:	2e 96       	adiw	r28, 0x0e	; 14
    1dcc:	0f b6       	in	r0, 0x3f	; 63
    1dce:	f8 94       	cli
    1dd0:	de bf       	out	0x3e, r29	; 62
    1dd2:	0f be       	out	0x3f, r0	; 63
    1dd4:	cd bf       	out	0x3d, r28	; 61
    1dd6:	cf 91       	pop	r28
    1dd8:	df 91       	pop	r29
    1dda:	08 95       	ret

00001ddc <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1ddc:	df 93       	push	r29
    1dde:	cf 93       	push	r28
    1de0:	cd b7       	in	r28, 0x3d	; 61
    1de2:	de b7       	in	r29, 0x3e	; 62
    1de4:	e9 97       	sbiw	r28, 0x39	; 57
    1de6:	0f b6       	in	r0, 0x3f	; 63
    1de8:	f8 94       	cli
    1dea:	de bf       	out	0x3e, r29	; 62
    1dec:	0f be       	out	0x3f, r0	; 63
    1dee:	cd bf       	out	0x3d, r28	; 61
    1df0:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1df2:	83 e0       	ldi	r24, 0x03	; 3
    1df4:	62 e0       	ldi	r22, 0x02	; 2
    1df6:	40 e0       	ldi	r20, 0x00	; 0
    1df8:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <GPIO_writePin>
    1dfc:	80 e0       	ldi	r24, 0x00	; 0
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	a0 e8       	ldi	r26, 0x80	; 128
    1e02:	bf e3       	ldi	r27, 0x3F	; 63
    1e04:	8d ab       	std	Y+53, r24	; 0x35
    1e06:	9e ab       	std	Y+54, r25	; 0x36
    1e08:	af ab       	std	Y+55, r26	; 0x37
    1e0a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e0c:	6d a9       	ldd	r22, Y+53	; 0x35
    1e0e:	7e a9       	ldd	r23, Y+54	; 0x36
    1e10:	8f a9       	ldd	r24, Y+55	; 0x37
    1e12:	98 ad       	ldd	r25, Y+56	; 0x38
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	4a e7       	ldi	r20, 0x7A	; 122
    1e1a:	53 e4       	ldi	r21, 0x43	; 67
    1e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e20:	dc 01       	movw	r26, r24
    1e22:	cb 01       	movw	r24, r22
    1e24:	89 ab       	std	Y+49, r24	; 0x31
    1e26:	9a ab       	std	Y+50, r25	; 0x32
    1e28:	ab ab       	std	Y+51, r26	; 0x33
    1e2a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e2c:	69 a9       	ldd	r22, Y+49	; 0x31
    1e2e:	7a a9       	ldd	r23, Y+50	; 0x32
    1e30:	8b a9       	ldd	r24, Y+51	; 0x33
    1e32:	9c a9       	ldd	r25, Y+52	; 0x34
    1e34:	20 e0       	ldi	r18, 0x00	; 0
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	40 e8       	ldi	r20, 0x80	; 128
    1e3a:	5f e3       	ldi	r21, 0x3F	; 63
    1e3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e40:	88 23       	and	r24, r24
    1e42:	2c f4       	brge	.+10     	; 0x1e4e <LCD_sendCommand+0x72>
		__ticks = 1;
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	98 ab       	std	Y+48, r25	; 0x30
    1e4a:	8f a7       	std	Y+47, r24	; 0x2f
    1e4c:	3f c0       	rjmp	.+126    	; 0x1ecc <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1e4e:	69 a9       	ldd	r22, Y+49	; 0x31
    1e50:	7a a9       	ldd	r23, Y+50	; 0x32
    1e52:	8b a9       	ldd	r24, Y+51	; 0x33
    1e54:	9c a9       	ldd	r25, Y+52	; 0x34
    1e56:	20 e0       	ldi	r18, 0x00	; 0
    1e58:	3f ef       	ldi	r19, 0xFF	; 255
    1e5a:	4f e7       	ldi	r20, 0x7F	; 127
    1e5c:	57 e4       	ldi	r21, 0x47	; 71
    1e5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e62:	18 16       	cp	r1, r24
    1e64:	4c f5       	brge	.+82     	; 0x1eb8 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e66:	6d a9       	ldd	r22, Y+53	; 0x35
    1e68:	7e a9       	ldd	r23, Y+54	; 0x36
    1e6a:	8f a9       	ldd	r24, Y+55	; 0x37
    1e6c:	98 ad       	ldd	r25, Y+56	; 0x38
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	40 e2       	ldi	r20, 0x20	; 32
    1e74:	51 e4       	ldi	r21, 0x41	; 65
    1e76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	cb 01       	movw	r24, r22
    1e7e:	bc 01       	movw	r22, r24
    1e80:	cd 01       	movw	r24, r26
    1e82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e86:	dc 01       	movw	r26, r24
    1e88:	cb 01       	movw	r24, r22
    1e8a:	98 ab       	std	Y+48, r25	; 0x30
    1e8c:	8f a7       	std	Y+47, r24	; 0x2f
    1e8e:	0f c0       	rjmp	.+30     	; 0x1eae <LCD_sendCommand+0xd2>
    1e90:	89 e1       	ldi	r24, 0x19	; 25
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	9e a7       	std	Y+46, r25	; 0x2e
    1e96:	8d a7       	std	Y+45, r24	; 0x2d
    1e98:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e9a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e9c:	01 97       	sbiw	r24, 0x01	; 1
    1e9e:	f1 f7       	brne	.-4      	; 0x1e9c <LCD_sendCommand+0xc0>
    1ea0:	9e a7       	std	Y+46, r25	; 0x2e
    1ea2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ea4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ea6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ea8:	01 97       	sbiw	r24, 0x01	; 1
    1eaa:	98 ab       	std	Y+48, r25	; 0x30
    1eac:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eae:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eb0:	98 a9       	ldd	r25, Y+48	; 0x30
    1eb2:	00 97       	sbiw	r24, 0x00	; 0
    1eb4:	69 f7       	brne	.-38     	; 0x1e90 <LCD_sendCommand+0xb4>
    1eb6:	14 c0       	rjmp	.+40     	; 0x1ee0 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eb8:	69 a9       	ldd	r22, Y+49	; 0x31
    1eba:	7a a9       	ldd	r23, Y+50	; 0x32
    1ebc:	8b a9       	ldd	r24, Y+51	; 0x33
    1ebe:	9c a9       	ldd	r25, Y+52	; 0x34
    1ec0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	98 ab       	std	Y+48, r25	; 0x30
    1eca:	8f a7       	std	Y+47, r24	; 0x2f
    1ecc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ece:	98 a9       	ldd	r25, Y+48	; 0x30
    1ed0:	9c a7       	std	Y+44, r25	; 0x2c
    1ed2:	8b a7       	std	Y+43, r24	; 0x2b
    1ed4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ed6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ed8:	01 97       	sbiw	r24, 0x01	; 1
    1eda:	f1 f7       	brne	.-4      	; 0x1ed8 <LCD_sendCommand+0xfc>
    1edc:	9c a7       	std	Y+44, r25	; 0x2c
    1ede:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1ee0:	83 e0       	ldi	r24, 0x03	; 3
    1ee2:	64 e0       	ldi	r22, 0x04	; 4
    1ee4:	41 e0       	ldi	r20, 0x01	; 1
    1ee6:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <GPIO_writePin>
    1eea:	80 e0       	ldi	r24, 0x00	; 0
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	a0 e8       	ldi	r26, 0x80	; 128
    1ef0:	bf e3       	ldi	r27, 0x3F	; 63
    1ef2:	8f a3       	std	Y+39, r24	; 0x27
    1ef4:	98 a7       	std	Y+40, r25	; 0x28
    1ef6:	a9 a7       	std	Y+41, r26	; 0x29
    1ef8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1efa:	6f a1       	ldd	r22, Y+39	; 0x27
    1efc:	78 a5       	ldd	r23, Y+40	; 0x28
    1efe:	89 a5       	ldd	r24, Y+41	; 0x29
    1f00:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	4a e7       	ldi	r20, 0x7A	; 122
    1f08:	53 e4       	ldi	r21, 0x43	; 67
    1f0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0e:	dc 01       	movw	r26, r24
    1f10:	cb 01       	movw	r24, r22
    1f12:	8b a3       	std	Y+35, r24	; 0x23
    1f14:	9c a3       	std	Y+36, r25	; 0x24
    1f16:	ad a3       	std	Y+37, r26	; 0x25
    1f18:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f1a:	6b a1       	ldd	r22, Y+35	; 0x23
    1f1c:	7c a1       	ldd	r23, Y+36	; 0x24
    1f1e:	8d a1       	ldd	r24, Y+37	; 0x25
    1f20:	9e a1       	ldd	r25, Y+38	; 0x26
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	40 e8       	ldi	r20, 0x80	; 128
    1f28:	5f e3       	ldi	r21, 0x3F	; 63
    1f2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f2e:	88 23       	and	r24, r24
    1f30:	2c f4       	brge	.+10     	; 0x1f3c <LCD_sendCommand+0x160>
		__ticks = 1;
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	9a a3       	std	Y+34, r25	; 0x22
    1f38:	89 a3       	std	Y+33, r24	; 0x21
    1f3a:	3f c0       	rjmp	.+126    	; 0x1fba <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1f3c:	6b a1       	ldd	r22, Y+35	; 0x23
    1f3e:	7c a1       	ldd	r23, Y+36	; 0x24
    1f40:	8d a1       	ldd	r24, Y+37	; 0x25
    1f42:	9e a1       	ldd	r25, Y+38	; 0x26
    1f44:	20 e0       	ldi	r18, 0x00	; 0
    1f46:	3f ef       	ldi	r19, 0xFF	; 255
    1f48:	4f e7       	ldi	r20, 0x7F	; 127
    1f4a:	57 e4       	ldi	r21, 0x47	; 71
    1f4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f50:	18 16       	cp	r1, r24
    1f52:	4c f5       	brge	.+82     	; 0x1fa6 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f54:	6f a1       	ldd	r22, Y+39	; 0x27
    1f56:	78 a5       	ldd	r23, Y+40	; 0x28
    1f58:	89 a5       	ldd	r24, Y+41	; 0x29
    1f5a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	40 e2       	ldi	r20, 0x20	; 32
    1f62:	51 e4       	ldi	r21, 0x41	; 65
    1f64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	bc 01       	movw	r22, r24
    1f6e:	cd 01       	movw	r24, r26
    1f70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	9a a3       	std	Y+34, r25	; 0x22
    1f7a:	89 a3       	std	Y+33, r24	; 0x21
    1f7c:	0f c0       	rjmp	.+30     	; 0x1f9c <LCD_sendCommand+0x1c0>
    1f7e:	89 e1       	ldi	r24, 0x19	; 25
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	98 a3       	std	Y+32, r25	; 0x20
    1f84:	8f 8f       	std	Y+31, r24	; 0x1f
    1f86:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f88:	98 a1       	ldd	r25, Y+32	; 0x20
    1f8a:	01 97       	sbiw	r24, 0x01	; 1
    1f8c:	f1 f7       	brne	.-4      	; 0x1f8a <LCD_sendCommand+0x1ae>
    1f8e:	98 a3       	std	Y+32, r25	; 0x20
    1f90:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f92:	89 a1       	ldd	r24, Y+33	; 0x21
    1f94:	9a a1       	ldd	r25, Y+34	; 0x22
    1f96:	01 97       	sbiw	r24, 0x01	; 1
    1f98:	9a a3       	std	Y+34, r25	; 0x22
    1f9a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f9c:	89 a1       	ldd	r24, Y+33	; 0x21
    1f9e:	9a a1       	ldd	r25, Y+34	; 0x22
    1fa0:	00 97       	sbiw	r24, 0x00	; 0
    1fa2:	69 f7       	brne	.-38     	; 0x1f7e <LCD_sendCommand+0x1a2>
    1fa4:	14 c0       	rjmp	.+40     	; 0x1fce <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa6:	6b a1       	ldd	r22, Y+35	; 0x23
    1fa8:	7c a1       	ldd	r23, Y+36	; 0x24
    1faa:	8d a1       	ldd	r24, Y+37	; 0x25
    1fac:	9e a1       	ldd	r25, Y+38	; 0x26
    1fae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	9a a3       	std	Y+34, r25	; 0x22
    1fb8:	89 a3       	std	Y+33, r24	; 0x21
    1fba:	89 a1       	ldd	r24, Y+33	; 0x21
    1fbc:	9a a1       	ldd	r25, Y+34	; 0x22
    1fbe:	9e 8f       	std	Y+30, r25	; 0x1e
    1fc0:	8d 8f       	std	Y+29, r24	; 0x1d
    1fc2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fc4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fc6:	01 97       	sbiw	r24, 0x01	; 1
    1fc8:	f1 f7       	brne	.-4      	; 0x1fc6 <LCD_sendCommand+0x1ea>
    1fca:	9e 8f       	std	Y+30, r25	; 0x1e
    1fcc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1fce:	82 e0       	ldi	r24, 0x02	; 2
    1fd0:	69 ad       	ldd	r22, Y+57	; 0x39
    1fd2:	0e 94 b0 0c 	call	0x1960	; 0x1960 <GPIO_writePort>
    1fd6:	80 e0       	ldi	r24, 0x00	; 0
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	a0 e8       	ldi	r26, 0x80	; 128
    1fdc:	bf e3       	ldi	r27, 0x3F	; 63
    1fde:	89 8f       	std	Y+25, r24	; 0x19
    1fe0:	9a 8f       	std	Y+26, r25	; 0x1a
    1fe2:	ab 8f       	std	Y+27, r26	; 0x1b
    1fe4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fe6:	69 8d       	ldd	r22, Y+25	; 0x19
    1fe8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	4a e7       	ldi	r20, 0x7A	; 122
    1ff4:	53 e4       	ldi	r21, 0x43	; 67
    1ff6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	8d 8b       	std	Y+21, r24	; 0x15
    2000:	9e 8b       	std	Y+22, r25	; 0x16
    2002:	af 8b       	std	Y+23, r26	; 0x17
    2004:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2006:	6d 89       	ldd	r22, Y+21	; 0x15
    2008:	7e 89       	ldd	r23, Y+22	; 0x16
    200a:	8f 89       	ldd	r24, Y+23	; 0x17
    200c:	98 8d       	ldd	r25, Y+24	; 0x18
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	40 e8       	ldi	r20, 0x80	; 128
    2014:	5f e3       	ldi	r21, 0x3F	; 63
    2016:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    201a:	88 23       	and	r24, r24
    201c:	2c f4       	brge	.+10     	; 0x2028 <LCD_sendCommand+0x24c>
		__ticks = 1;
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	9c 8b       	std	Y+20, r25	; 0x14
    2024:	8b 8b       	std	Y+19, r24	; 0x13
    2026:	3f c0       	rjmp	.+126    	; 0x20a6 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2028:	6d 89       	ldd	r22, Y+21	; 0x15
    202a:	7e 89       	ldd	r23, Y+22	; 0x16
    202c:	8f 89       	ldd	r24, Y+23	; 0x17
    202e:	98 8d       	ldd	r25, Y+24	; 0x18
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	3f ef       	ldi	r19, 0xFF	; 255
    2034:	4f e7       	ldi	r20, 0x7F	; 127
    2036:	57 e4       	ldi	r21, 0x47	; 71
    2038:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    203c:	18 16       	cp	r1, r24
    203e:	4c f5       	brge	.+82     	; 0x2092 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2040:	69 8d       	ldd	r22, Y+25	; 0x19
    2042:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2044:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2046:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	40 e2       	ldi	r20, 0x20	; 32
    204e:	51 e4       	ldi	r21, 0x41	; 65
    2050:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2054:	dc 01       	movw	r26, r24
    2056:	cb 01       	movw	r24, r22
    2058:	bc 01       	movw	r22, r24
    205a:	cd 01       	movw	r24, r26
    205c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2060:	dc 01       	movw	r26, r24
    2062:	cb 01       	movw	r24, r22
    2064:	9c 8b       	std	Y+20, r25	; 0x14
    2066:	8b 8b       	std	Y+19, r24	; 0x13
    2068:	0f c0       	rjmp	.+30     	; 0x2088 <LCD_sendCommand+0x2ac>
    206a:	89 e1       	ldi	r24, 0x19	; 25
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	9a 8b       	std	Y+18, r25	; 0x12
    2070:	89 8b       	std	Y+17, r24	; 0x11
    2072:	89 89       	ldd	r24, Y+17	; 0x11
    2074:	9a 89       	ldd	r25, Y+18	; 0x12
    2076:	01 97       	sbiw	r24, 0x01	; 1
    2078:	f1 f7       	brne	.-4      	; 0x2076 <LCD_sendCommand+0x29a>
    207a:	9a 8b       	std	Y+18, r25	; 0x12
    207c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    207e:	8b 89       	ldd	r24, Y+19	; 0x13
    2080:	9c 89       	ldd	r25, Y+20	; 0x14
    2082:	01 97       	sbiw	r24, 0x01	; 1
    2084:	9c 8b       	std	Y+20, r25	; 0x14
    2086:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2088:	8b 89       	ldd	r24, Y+19	; 0x13
    208a:	9c 89       	ldd	r25, Y+20	; 0x14
    208c:	00 97       	sbiw	r24, 0x00	; 0
    208e:	69 f7       	brne	.-38     	; 0x206a <LCD_sendCommand+0x28e>
    2090:	14 c0       	rjmp	.+40     	; 0x20ba <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2092:	6d 89       	ldd	r22, Y+21	; 0x15
    2094:	7e 89       	ldd	r23, Y+22	; 0x16
    2096:	8f 89       	ldd	r24, Y+23	; 0x17
    2098:	98 8d       	ldd	r25, Y+24	; 0x18
    209a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    209e:	dc 01       	movw	r26, r24
    20a0:	cb 01       	movw	r24, r22
    20a2:	9c 8b       	std	Y+20, r25	; 0x14
    20a4:	8b 8b       	std	Y+19, r24	; 0x13
    20a6:	8b 89       	ldd	r24, Y+19	; 0x13
    20a8:	9c 89       	ldd	r25, Y+20	; 0x14
    20aa:	98 8b       	std	Y+16, r25	; 0x10
    20ac:	8f 87       	std	Y+15, r24	; 0x0f
    20ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    20b0:	98 89       	ldd	r25, Y+16	; 0x10
    20b2:	01 97       	sbiw	r24, 0x01	; 1
    20b4:	f1 f7       	brne	.-4      	; 0x20b2 <LCD_sendCommand+0x2d6>
    20b6:	98 8b       	std	Y+16, r25	; 0x10
    20b8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    20ba:	83 e0       	ldi	r24, 0x03	; 3
    20bc:	64 e0       	ldi	r22, 0x04	; 4
    20be:	40 e0       	ldi	r20, 0x00	; 0
    20c0:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <GPIO_writePin>
    20c4:	80 e0       	ldi	r24, 0x00	; 0
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	a0 e8       	ldi	r26, 0x80	; 128
    20ca:	bf e3       	ldi	r27, 0x3F	; 63
    20cc:	8b 87       	std	Y+11, r24	; 0x0b
    20ce:	9c 87       	std	Y+12, r25	; 0x0c
    20d0:	ad 87       	std	Y+13, r26	; 0x0d
    20d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    20d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    20d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    20da:	9e 85       	ldd	r25, Y+14	; 0x0e
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	4a e7       	ldi	r20, 0x7A	; 122
    20e2:	53 e4       	ldi	r21, 0x43	; 67
    20e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	8f 83       	std	Y+7, r24	; 0x07
    20ee:	98 87       	std	Y+8, r25	; 0x08
    20f0:	a9 87       	std	Y+9, r26	; 0x09
    20f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20f4:	6f 81       	ldd	r22, Y+7	; 0x07
    20f6:	78 85       	ldd	r23, Y+8	; 0x08
    20f8:	89 85       	ldd	r24, Y+9	; 0x09
    20fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	40 e8       	ldi	r20, 0x80	; 128
    2102:	5f e3       	ldi	r21, 0x3F	; 63
    2104:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2108:	88 23       	and	r24, r24
    210a:	2c f4       	brge	.+10     	; 0x2116 <LCD_sendCommand+0x33a>
		__ticks = 1;
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	9e 83       	std	Y+6, r25	; 0x06
    2112:	8d 83       	std	Y+5, r24	; 0x05
    2114:	3f c0       	rjmp	.+126    	; 0x2194 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2116:	6f 81       	ldd	r22, Y+7	; 0x07
    2118:	78 85       	ldd	r23, Y+8	; 0x08
    211a:	89 85       	ldd	r24, Y+9	; 0x09
    211c:	9a 85       	ldd	r25, Y+10	; 0x0a
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	3f ef       	ldi	r19, 0xFF	; 255
    2122:	4f e7       	ldi	r20, 0x7F	; 127
    2124:	57 e4       	ldi	r21, 0x47	; 71
    2126:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    212a:	18 16       	cp	r1, r24
    212c:	4c f5       	brge	.+82     	; 0x2180 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    212e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2130:	7c 85       	ldd	r23, Y+12	; 0x0c
    2132:	8d 85       	ldd	r24, Y+13	; 0x0d
    2134:	9e 85       	ldd	r25, Y+14	; 0x0e
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	40 e2       	ldi	r20, 0x20	; 32
    213c:	51 e4       	ldi	r21, 0x41	; 65
    213e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2142:	dc 01       	movw	r26, r24
    2144:	cb 01       	movw	r24, r22
    2146:	bc 01       	movw	r22, r24
    2148:	cd 01       	movw	r24, r26
    214a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	9e 83       	std	Y+6, r25	; 0x06
    2154:	8d 83       	std	Y+5, r24	; 0x05
    2156:	0f c0       	rjmp	.+30     	; 0x2176 <LCD_sendCommand+0x39a>
    2158:	89 e1       	ldi	r24, 0x19	; 25
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	9c 83       	std	Y+4, r25	; 0x04
    215e:	8b 83       	std	Y+3, r24	; 0x03
    2160:	8b 81       	ldd	r24, Y+3	; 0x03
    2162:	9c 81       	ldd	r25, Y+4	; 0x04
    2164:	01 97       	sbiw	r24, 0x01	; 1
    2166:	f1 f7       	brne	.-4      	; 0x2164 <LCD_sendCommand+0x388>
    2168:	9c 83       	std	Y+4, r25	; 0x04
    216a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    216c:	8d 81       	ldd	r24, Y+5	; 0x05
    216e:	9e 81       	ldd	r25, Y+6	; 0x06
    2170:	01 97       	sbiw	r24, 0x01	; 1
    2172:	9e 83       	std	Y+6, r25	; 0x06
    2174:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2176:	8d 81       	ldd	r24, Y+5	; 0x05
    2178:	9e 81       	ldd	r25, Y+6	; 0x06
    217a:	00 97       	sbiw	r24, 0x00	; 0
    217c:	69 f7       	brne	.-38     	; 0x2158 <LCD_sendCommand+0x37c>
    217e:	14 c0       	rjmp	.+40     	; 0x21a8 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2180:	6f 81       	ldd	r22, Y+7	; 0x07
    2182:	78 85       	ldd	r23, Y+8	; 0x08
    2184:	89 85       	ldd	r24, Y+9	; 0x09
    2186:	9a 85       	ldd	r25, Y+10	; 0x0a
    2188:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    218c:	dc 01       	movw	r26, r24
    218e:	cb 01       	movw	r24, r22
    2190:	9e 83       	std	Y+6, r25	; 0x06
    2192:	8d 83       	std	Y+5, r24	; 0x05
    2194:	8d 81       	ldd	r24, Y+5	; 0x05
    2196:	9e 81       	ldd	r25, Y+6	; 0x06
    2198:	9a 83       	std	Y+2, r25	; 0x02
    219a:	89 83       	std	Y+1, r24	; 0x01
    219c:	89 81       	ldd	r24, Y+1	; 0x01
    219e:	9a 81       	ldd	r25, Y+2	; 0x02
    21a0:	01 97       	sbiw	r24, 0x01	; 1
    21a2:	f1 f7       	brne	.-4      	; 0x21a0 <LCD_sendCommand+0x3c4>
    21a4:	9a 83       	std	Y+2, r25	; 0x02
    21a6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    21a8:	e9 96       	adiw	r28, 0x39	; 57
    21aa:	0f b6       	in	r0, 0x3f	; 63
    21ac:	f8 94       	cli
    21ae:	de bf       	out	0x3e, r29	; 62
    21b0:	0f be       	out	0x3f, r0	; 63
    21b2:	cd bf       	out	0x3d, r28	; 61
    21b4:	cf 91       	pop	r28
    21b6:	df 91       	pop	r29
    21b8:	08 95       	ret

000021ba <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    21ba:	df 93       	push	r29
    21bc:	cf 93       	push	r28
    21be:	cd b7       	in	r28, 0x3d	; 61
    21c0:	de b7       	in	r29, 0x3e	; 62
    21c2:	e9 97       	sbiw	r28, 0x39	; 57
    21c4:	0f b6       	in	r0, 0x3f	; 63
    21c6:	f8 94       	cli
    21c8:	de bf       	out	0x3e, r29	; 62
    21ca:	0f be       	out	0x3f, r0	; 63
    21cc:	cd bf       	out	0x3d, r28	; 61
    21ce:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    21d0:	83 e0       	ldi	r24, 0x03	; 3
    21d2:	62 e0       	ldi	r22, 0x02	; 2
    21d4:	41 e0       	ldi	r20, 0x01	; 1
    21d6:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <GPIO_writePin>
    21da:	80 e0       	ldi	r24, 0x00	; 0
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	a0 e8       	ldi	r26, 0x80	; 128
    21e0:	bf e3       	ldi	r27, 0x3F	; 63
    21e2:	8d ab       	std	Y+53, r24	; 0x35
    21e4:	9e ab       	std	Y+54, r25	; 0x36
    21e6:	af ab       	std	Y+55, r26	; 0x37
    21e8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ea:	6d a9       	ldd	r22, Y+53	; 0x35
    21ec:	7e a9       	ldd	r23, Y+54	; 0x36
    21ee:	8f a9       	ldd	r24, Y+55	; 0x37
    21f0:	98 ad       	ldd	r25, Y+56	; 0x38
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	4a e7       	ldi	r20, 0x7A	; 122
    21f8:	53 e4       	ldi	r21, 0x43	; 67
    21fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	89 ab       	std	Y+49, r24	; 0x31
    2204:	9a ab       	std	Y+50, r25	; 0x32
    2206:	ab ab       	std	Y+51, r26	; 0x33
    2208:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    220a:	69 a9       	ldd	r22, Y+49	; 0x31
    220c:	7a a9       	ldd	r23, Y+50	; 0x32
    220e:	8b a9       	ldd	r24, Y+51	; 0x33
    2210:	9c a9       	ldd	r25, Y+52	; 0x34
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	40 e8       	ldi	r20, 0x80	; 128
    2218:	5f e3       	ldi	r21, 0x3F	; 63
    221a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    221e:	88 23       	and	r24, r24
    2220:	2c f4       	brge	.+10     	; 0x222c <LCD_displayCharacter+0x72>
		__ticks = 1;
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	98 ab       	std	Y+48, r25	; 0x30
    2228:	8f a7       	std	Y+47, r24	; 0x2f
    222a:	3f c0       	rjmp	.+126    	; 0x22aa <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    222c:	69 a9       	ldd	r22, Y+49	; 0x31
    222e:	7a a9       	ldd	r23, Y+50	; 0x32
    2230:	8b a9       	ldd	r24, Y+51	; 0x33
    2232:	9c a9       	ldd	r25, Y+52	; 0x34
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	3f ef       	ldi	r19, 0xFF	; 255
    2238:	4f e7       	ldi	r20, 0x7F	; 127
    223a:	57 e4       	ldi	r21, 0x47	; 71
    223c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2240:	18 16       	cp	r1, r24
    2242:	4c f5       	brge	.+82     	; 0x2296 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2244:	6d a9       	ldd	r22, Y+53	; 0x35
    2246:	7e a9       	ldd	r23, Y+54	; 0x36
    2248:	8f a9       	ldd	r24, Y+55	; 0x37
    224a:	98 ad       	ldd	r25, Y+56	; 0x38
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	40 e2       	ldi	r20, 0x20	; 32
    2252:	51 e4       	ldi	r21, 0x41	; 65
    2254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	bc 01       	movw	r22, r24
    225e:	cd 01       	movw	r24, r26
    2260:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2264:	dc 01       	movw	r26, r24
    2266:	cb 01       	movw	r24, r22
    2268:	98 ab       	std	Y+48, r25	; 0x30
    226a:	8f a7       	std	Y+47, r24	; 0x2f
    226c:	0f c0       	rjmp	.+30     	; 0x228c <LCD_displayCharacter+0xd2>
    226e:	89 e1       	ldi	r24, 0x19	; 25
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	9e a7       	std	Y+46, r25	; 0x2e
    2274:	8d a7       	std	Y+45, r24	; 0x2d
    2276:	8d a5       	ldd	r24, Y+45	; 0x2d
    2278:	9e a5       	ldd	r25, Y+46	; 0x2e
    227a:	01 97       	sbiw	r24, 0x01	; 1
    227c:	f1 f7       	brne	.-4      	; 0x227a <LCD_displayCharacter+0xc0>
    227e:	9e a7       	std	Y+46, r25	; 0x2e
    2280:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2282:	8f a5       	ldd	r24, Y+47	; 0x2f
    2284:	98 a9       	ldd	r25, Y+48	; 0x30
    2286:	01 97       	sbiw	r24, 0x01	; 1
    2288:	98 ab       	std	Y+48, r25	; 0x30
    228a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    228c:	8f a5       	ldd	r24, Y+47	; 0x2f
    228e:	98 a9       	ldd	r25, Y+48	; 0x30
    2290:	00 97       	sbiw	r24, 0x00	; 0
    2292:	69 f7       	brne	.-38     	; 0x226e <LCD_displayCharacter+0xb4>
    2294:	14 c0       	rjmp	.+40     	; 0x22be <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2296:	69 a9       	ldd	r22, Y+49	; 0x31
    2298:	7a a9       	ldd	r23, Y+50	; 0x32
    229a:	8b a9       	ldd	r24, Y+51	; 0x33
    229c:	9c a9       	ldd	r25, Y+52	; 0x34
    229e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	98 ab       	std	Y+48, r25	; 0x30
    22a8:	8f a7       	std	Y+47, r24	; 0x2f
    22aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    22ac:	98 a9       	ldd	r25, Y+48	; 0x30
    22ae:	9c a7       	std	Y+44, r25	; 0x2c
    22b0:	8b a7       	std	Y+43, r24	; 0x2b
    22b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    22b4:	9c a5       	ldd	r25, Y+44	; 0x2c
    22b6:	01 97       	sbiw	r24, 0x01	; 1
    22b8:	f1 f7       	brne	.-4      	; 0x22b6 <LCD_displayCharacter+0xfc>
    22ba:	9c a7       	std	Y+44, r25	; 0x2c
    22bc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    22be:	83 e0       	ldi	r24, 0x03	; 3
    22c0:	64 e0       	ldi	r22, 0x04	; 4
    22c2:	41 e0       	ldi	r20, 0x01	; 1
    22c4:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <GPIO_writePin>
    22c8:	80 e0       	ldi	r24, 0x00	; 0
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	a0 e8       	ldi	r26, 0x80	; 128
    22ce:	bf e3       	ldi	r27, 0x3F	; 63
    22d0:	8f a3       	std	Y+39, r24	; 0x27
    22d2:	98 a7       	std	Y+40, r25	; 0x28
    22d4:	a9 a7       	std	Y+41, r26	; 0x29
    22d6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22d8:	6f a1       	ldd	r22, Y+39	; 0x27
    22da:	78 a5       	ldd	r23, Y+40	; 0x28
    22dc:	89 a5       	ldd	r24, Y+41	; 0x29
    22de:	9a a5       	ldd	r25, Y+42	; 0x2a
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	4a e7       	ldi	r20, 0x7A	; 122
    22e6:	53 e4       	ldi	r21, 0x43	; 67
    22e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ec:	dc 01       	movw	r26, r24
    22ee:	cb 01       	movw	r24, r22
    22f0:	8b a3       	std	Y+35, r24	; 0x23
    22f2:	9c a3       	std	Y+36, r25	; 0x24
    22f4:	ad a3       	std	Y+37, r26	; 0x25
    22f6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22f8:	6b a1       	ldd	r22, Y+35	; 0x23
    22fa:	7c a1       	ldd	r23, Y+36	; 0x24
    22fc:	8d a1       	ldd	r24, Y+37	; 0x25
    22fe:	9e a1       	ldd	r25, Y+38	; 0x26
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	40 e8       	ldi	r20, 0x80	; 128
    2306:	5f e3       	ldi	r21, 0x3F	; 63
    2308:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    230c:	88 23       	and	r24, r24
    230e:	2c f4       	brge	.+10     	; 0x231a <LCD_displayCharacter+0x160>
		__ticks = 1;
    2310:	81 e0       	ldi	r24, 0x01	; 1
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	9a a3       	std	Y+34, r25	; 0x22
    2316:	89 a3       	std	Y+33, r24	; 0x21
    2318:	3f c0       	rjmp	.+126    	; 0x2398 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    231a:	6b a1       	ldd	r22, Y+35	; 0x23
    231c:	7c a1       	ldd	r23, Y+36	; 0x24
    231e:	8d a1       	ldd	r24, Y+37	; 0x25
    2320:	9e a1       	ldd	r25, Y+38	; 0x26
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	3f ef       	ldi	r19, 0xFF	; 255
    2326:	4f e7       	ldi	r20, 0x7F	; 127
    2328:	57 e4       	ldi	r21, 0x47	; 71
    232a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    232e:	18 16       	cp	r1, r24
    2330:	4c f5       	brge	.+82     	; 0x2384 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2332:	6f a1       	ldd	r22, Y+39	; 0x27
    2334:	78 a5       	ldd	r23, Y+40	; 0x28
    2336:	89 a5       	ldd	r24, Y+41	; 0x29
    2338:	9a a5       	ldd	r25, Y+42	; 0x2a
    233a:	20 e0       	ldi	r18, 0x00	; 0
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	40 e2       	ldi	r20, 0x20	; 32
    2340:	51 e4       	ldi	r21, 0x41	; 65
    2342:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2346:	dc 01       	movw	r26, r24
    2348:	cb 01       	movw	r24, r22
    234a:	bc 01       	movw	r22, r24
    234c:	cd 01       	movw	r24, r26
    234e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2352:	dc 01       	movw	r26, r24
    2354:	cb 01       	movw	r24, r22
    2356:	9a a3       	std	Y+34, r25	; 0x22
    2358:	89 a3       	std	Y+33, r24	; 0x21
    235a:	0f c0       	rjmp	.+30     	; 0x237a <LCD_displayCharacter+0x1c0>
    235c:	89 e1       	ldi	r24, 0x19	; 25
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	98 a3       	std	Y+32, r25	; 0x20
    2362:	8f 8f       	std	Y+31, r24	; 0x1f
    2364:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2366:	98 a1       	ldd	r25, Y+32	; 0x20
    2368:	01 97       	sbiw	r24, 0x01	; 1
    236a:	f1 f7       	brne	.-4      	; 0x2368 <LCD_displayCharacter+0x1ae>
    236c:	98 a3       	std	Y+32, r25	; 0x20
    236e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2370:	89 a1       	ldd	r24, Y+33	; 0x21
    2372:	9a a1       	ldd	r25, Y+34	; 0x22
    2374:	01 97       	sbiw	r24, 0x01	; 1
    2376:	9a a3       	std	Y+34, r25	; 0x22
    2378:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    237a:	89 a1       	ldd	r24, Y+33	; 0x21
    237c:	9a a1       	ldd	r25, Y+34	; 0x22
    237e:	00 97       	sbiw	r24, 0x00	; 0
    2380:	69 f7       	brne	.-38     	; 0x235c <LCD_displayCharacter+0x1a2>
    2382:	14 c0       	rjmp	.+40     	; 0x23ac <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2384:	6b a1       	ldd	r22, Y+35	; 0x23
    2386:	7c a1       	ldd	r23, Y+36	; 0x24
    2388:	8d a1       	ldd	r24, Y+37	; 0x25
    238a:	9e a1       	ldd	r25, Y+38	; 0x26
    238c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	9a a3       	std	Y+34, r25	; 0x22
    2396:	89 a3       	std	Y+33, r24	; 0x21
    2398:	89 a1       	ldd	r24, Y+33	; 0x21
    239a:	9a a1       	ldd	r25, Y+34	; 0x22
    239c:	9e 8f       	std	Y+30, r25	; 0x1e
    239e:	8d 8f       	std	Y+29, r24	; 0x1d
    23a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23a4:	01 97       	sbiw	r24, 0x01	; 1
    23a6:	f1 f7       	brne	.-4      	; 0x23a4 <LCD_displayCharacter+0x1ea>
    23a8:	9e 8f       	std	Y+30, r25	; 0x1e
    23aa:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    23ac:	82 e0       	ldi	r24, 0x02	; 2
    23ae:	69 ad       	ldd	r22, Y+57	; 0x39
    23b0:	0e 94 b0 0c 	call	0x1960	; 0x1960 <GPIO_writePort>
    23b4:	80 e0       	ldi	r24, 0x00	; 0
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	a0 e8       	ldi	r26, 0x80	; 128
    23ba:	bf e3       	ldi	r27, 0x3F	; 63
    23bc:	89 8f       	std	Y+25, r24	; 0x19
    23be:	9a 8f       	std	Y+26, r25	; 0x1a
    23c0:	ab 8f       	std	Y+27, r26	; 0x1b
    23c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23c4:	69 8d       	ldd	r22, Y+25	; 0x19
    23c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23cc:	20 e0       	ldi	r18, 0x00	; 0
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	4a e7       	ldi	r20, 0x7A	; 122
    23d2:	53 e4       	ldi	r21, 0x43	; 67
    23d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	8d 8b       	std	Y+21, r24	; 0x15
    23de:	9e 8b       	std	Y+22, r25	; 0x16
    23e0:	af 8b       	std	Y+23, r26	; 0x17
    23e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23e4:	6d 89       	ldd	r22, Y+21	; 0x15
    23e6:	7e 89       	ldd	r23, Y+22	; 0x16
    23e8:	8f 89       	ldd	r24, Y+23	; 0x17
    23ea:	98 8d       	ldd	r25, Y+24	; 0x18
    23ec:	20 e0       	ldi	r18, 0x00	; 0
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	40 e8       	ldi	r20, 0x80	; 128
    23f2:	5f e3       	ldi	r21, 0x3F	; 63
    23f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23f8:	88 23       	and	r24, r24
    23fa:	2c f4       	brge	.+10     	; 0x2406 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	9c 8b       	std	Y+20, r25	; 0x14
    2402:	8b 8b       	std	Y+19, r24	; 0x13
    2404:	3f c0       	rjmp	.+126    	; 0x2484 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2406:	6d 89       	ldd	r22, Y+21	; 0x15
    2408:	7e 89       	ldd	r23, Y+22	; 0x16
    240a:	8f 89       	ldd	r24, Y+23	; 0x17
    240c:	98 8d       	ldd	r25, Y+24	; 0x18
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	3f ef       	ldi	r19, 0xFF	; 255
    2412:	4f e7       	ldi	r20, 0x7F	; 127
    2414:	57 e4       	ldi	r21, 0x47	; 71
    2416:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    241a:	18 16       	cp	r1, r24
    241c:	4c f5       	brge	.+82     	; 0x2470 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    241e:	69 8d       	ldd	r22, Y+25	; 0x19
    2420:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2422:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2424:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2426:	20 e0       	ldi	r18, 0x00	; 0
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	40 e2       	ldi	r20, 0x20	; 32
    242c:	51 e4       	ldi	r21, 0x41	; 65
    242e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2432:	dc 01       	movw	r26, r24
    2434:	cb 01       	movw	r24, r22
    2436:	bc 01       	movw	r22, r24
    2438:	cd 01       	movw	r24, r26
    243a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    243e:	dc 01       	movw	r26, r24
    2440:	cb 01       	movw	r24, r22
    2442:	9c 8b       	std	Y+20, r25	; 0x14
    2444:	8b 8b       	std	Y+19, r24	; 0x13
    2446:	0f c0       	rjmp	.+30     	; 0x2466 <LCD_displayCharacter+0x2ac>
    2448:	89 e1       	ldi	r24, 0x19	; 25
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	9a 8b       	std	Y+18, r25	; 0x12
    244e:	89 8b       	std	Y+17, r24	; 0x11
    2450:	89 89       	ldd	r24, Y+17	; 0x11
    2452:	9a 89       	ldd	r25, Y+18	; 0x12
    2454:	01 97       	sbiw	r24, 0x01	; 1
    2456:	f1 f7       	brne	.-4      	; 0x2454 <LCD_displayCharacter+0x29a>
    2458:	9a 8b       	std	Y+18, r25	; 0x12
    245a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    245c:	8b 89       	ldd	r24, Y+19	; 0x13
    245e:	9c 89       	ldd	r25, Y+20	; 0x14
    2460:	01 97       	sbiw	r24, 0x01	; 1
    2462:	9c 8b       	std	Y+20, r25	; 0x14
    2464:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2466:	8b 89       	ldd	r24, Y+19	; 0x13
    2468:	9c 89       	ldd	r25, Y+20	; 0x14
    246a:	00 97       	sbiw	r24, 0x00	; 0
    246c:	69 f7       	brne	.-38     	; 0x2448 <LCD_displayCharacter+0x28e>
    246e:	14 c0       	rjmp	.+40     	; 0x2498 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2470:	6d 89       	ldd	r22, Y+21	; 0x15
    2472:	7e 89       	ldd	r23, Y+22	; 0x16
    2474:	8f 89       	ldd	r24, Y+23	; 0x17
    2476:	98 8d       	ldd	r25, Y+24	; 0x18
    2478:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    247c:	dc 01       	movw	r26, r24
    247e:	cb 01       	movw	r24, r22
    2480:	9c 8b       	std	Y+20, r25	; 0x14
    2482:	8b 8b       	std	Y+19, r24	; 0x13
    2484:	8b 89       	ldd	r24, Y+19	; 0x13
    2486:	9c 89       	ldd	r25, Y+20	; 0x14
    2488:	98 8b       	std	Y+16, r25	; 0x10
    248a:	8f 87       	std	Y+15, r24	; 0x0f
    248c:	8f 85       	ldd	r24, Y+15	; 0x0f
    248e:	98 89       	ldd	r25, Y+16	; 0x10
    2490:	01 97       	sbiw	r24, 0x01	; 1
    2492:	f1 f7       	brne	.-4      	; 0x2490 <LCD_displayCharacter+0x2d6>
    2494:	98 8b       	std	Y+16, r25	; 0x10
    2496:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2498:	83 e0       	ldi	r24, 0x03	; 3
    249a:	64 e0       	ldi	r22, 0x04	; 4
    249c:	40 e0       	ldi	r20, 0x00	; 0
    249e:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <GPIO_writePin>
    24a2:	80 e0       	ldi	r24, 0x00	; 0
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	a0 e8       	ldi	r26, 0x80	; 128
    24a8:	bf e3       	ldi	r27, 0x3F	; 63
    24aa:	8b 87       	std	Y+11, r24	; 0x0b
    24ac:	9c 87       	std	Y+12, r25	; 0x0c
    24ae:	ad 87       	std	Y+13, r26	; 0x0d
    24b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    24b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    24b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    24b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	4a e7       	ldi	r20, 0x7A	; 122
    24c0:	53 e4       	ldi	r21, 0x43	; 67
    24c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	8f 83       	std	Y+7, r24	; 0x07
    24cc:	98 87       	std	Y+8, r25	; 0x08
    24ce:	a9 87       	std	Y+9, r26	; 0x09
    24d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24d2:	6f 81       	ldd	r22, Y+7	; 0x07
    24d4:	78 85       	ldd	r23, Y+8	; 0x08
    24d6:	89 85       	ldd	r24, Y+9	; 0x09
    24d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	40 e8       	ldi	r20, 0x80	; 128
    24e0:	5f e3       	ldi	r21, 0x3F	; 63
    24e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24e6:	88 23       	and	r24, r24
    24e8:	2c f4       	brge	.+10     	; 0x24f4 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	9e 83       	std	Y+6, r25	; 0x06
    24f0:	8d 83       	std	Y+5, r24	; 0x05
    24f2:	3f c0       	rjmp	.+126    	; 0x2572 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    24f4:	6f 81       	ldd	r22, Y+7	; 0x07
    24f6:	78 85       	ldd	r23, Y+8	; 0x08
    24f8:	89 85       	ldd	r24, Y+9	; 0x09
    24fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	3f ef       	ldi	r19, 0xFF	; 255
    2500:	4f e7       	ldi	r20, 0x7F	; 127
    2502:	57 e4       	ldi	r21, 0x47	; 71
    2504:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2508:	18 16       	cp	r1, r24
    250a:	4c f5       	brge	.+82     	; 0x255e <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    250c:	6b 85       	ldd	r22, Y+11	; 0x0b
    250e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2510:	8d 85       	ldd	r24, Y+13	; 0x0d
    2512:	9e 85       	ldd	r25, Y+14	; 0x0e
    2514:	20 e0       	ldi	r18, 0x00	; 0
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	40 e2       	ldi	r20, 0x20	; 32
    251a:	51 e4       	ldi	r21, 0x41	; 65
    251c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2520:	dc 01       	movw	r26, r24
    2522:	cb 01       	movw	r24, r22
    2524:	bc 01       	movw	r22, r24
    2526:	cd 01       	movw	r24, r26
    2528:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    252c:	dc 01       	movw	r26, r24
    252e:	cb 01       	movw	r24, r22
    2530:	9e 83       	std	Y+6, r25	; 0x06
    2532:	8d 83       	std	Y+5, r24	; 0x05
    2534:	0f c0       	rjmp	.+30     	; 0x2554 <LCD_displayCharacter+0x39a>
    2536:	89 e1       	ldi	r24, 0x19	; 25
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	9c 83       	std	Y+4, r25	; 0x04
    253c:	8b 83       	std	Y+3, r24	; 0x03
    253e:	8b 81       	ldd	r24, Y+3	; 0x03
    2540:	9c 81       	ldd	r25, Y+4	; 0x04
    2542:	01 97       	sbiw	r24, 0x01	; 1
    2544:	f1 f7       	brne	.-4      	; 0x2542 <LCD_displayCharacter+0x388>
    2546:	9c 83       	std	Y+4, r25	; 0x04
    2548:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    254a:	8d 81       	ldd	r24, Y+5	; 0x05
    254c:	9e 81       	ldd	r25, Y+6	; 0x06
    254e:	01 97       	sbiw	r24, 0x01	; 1
    2550:	9e 83       	std	Y+6, r25	; 0x06
    2552:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2554:	8d 81       	ldd	r24, Y+5	; 0x05
    2556:	9e 81       	ldd	r25, Y+6	; 0x06
    2558:	00 97       	sbiw	r24, 0x00	; 0
    255a:	69 f7       	brne	.-38     	; 0x2536 <LCD_displayCharacter+0x37c>
    255c:	14 c0       	rjmp	.+40     	; 0x2586 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    255e:	6f 81       	ldd	r22, Y+7	; 0x07
    2560:	78 85       	ldd	r23, Y+8	; 0x08
    2562:	89 85       	ldd	r24, Y+9	; 0x09
    2564:	9a 85       	ldd	r25, Y+10	; 0x0a
    2566:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    256a:	dc 01       	movw	r26, r24
    256c:	cb 01       	movw	r24, r22
    256e:	9e 83       	std	Y+6, r25	; 0x06
    2570:	8d 83       	std	Y+5, r24	; 0x05
    2572:	8d 81       	ldd	r24, Y+5	; 0x05
    2574:	9e 81       	ldd	r25, Y+6	; 0x06
    2576:	9a 83       	std	Y+2, r25	; 0x02
    2578:	89 83       	std	Y+1, r24	; 0x01
    257a:	89 81       	ldd	r24, Y+1	; 0x01
    257c:	9a 81       	ldd	r25, Y+2	; 0x02
    257e:	01 97       	sbiw	r24, 0x01	; 1
    2580:	f1 f7       	brne	.-4      	; 0x257e <LCD_displayCharacter+0x3c4>
    2582:	9a 83       	std	Y+2, r25	; 0x02
    2584:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2586:	e9 96       	adiw	r28, 0x39	; 57
    2588:	0f b6       	in	r0, 0x3f	; 63
    258a:	f8 94       	cli
    258c:	de bf       	out	0x3e, r29	; 62
    258e:	0f be       	out	0x3f, r0	; 63
    2590:	cd bf       	out	0x3d, r28	; 61
    2592:	cf 91       	pop	r28
    2594:	df 91       	pop	r29
    2596:	08 95       	ret

00002598 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2598:	df 93       	push	r29
    259a:	cf 93       	push	r28
    259c:	00 d0       	rcall	.+0      	; 0x259e <LCD_displayString+0x6>
    259e:	0f 92       	push	r0
    25a0:	cd b7       	in	r28, 0x3d	; 61
    25a2:	de b7       	in	r29, 0x3e	; 62
    25a4:	9b 83       	std	Y+3, r25	; 0x03
    25a6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    25a8:	19 82       	std	Y+1, r1	; 0x01
    25aa:	0e c0       	rjmp	.+28     	; 0x25c8 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    25ac:	89 81       	ldd	r24, Y+1	; 0x01
    25ae:	28 2f       	mov	r18, r24
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	8a 81       	ldd	r24, Y+2	; 0x02
    25b4:	9b 81       	ldd	r25, Y+3	; 0x03
    25b6:	fc 01       	movw	r30, r24
    25b8:	e2 0f       	add	r30, r18
    25ba:	f3 1f       	adc	r31, r19
    25bc:	80 81       	ld	r24, Z
    25be:	0e 94 dd 10 	call	0x21ba	; 0x21ba <LCD_displayCharacter>
		i++;
    25c2:	89 81       	ldd	r24, Y+1	; 0x01
    25c4:	8f 5f       	subi	r24, 0xFF	; 255
    25c6:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    25c8:	89 81       	ldd	r24, Y+1	; 0x01
    25ca:	28 2f       	mov	r18, r24
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	8a 81       	ldd	r24, Y+2	; 0x02
    25d0:	9b 81       	ldd	r25, Y+3	; 0x03
    25d2:	fc 01       	movw	r30, r24
    25d4:	e2 0f       	add	r30, r18
    25d6:	f3 1f       	adc	r31, r19
    25d8:	80 81       	ld	r24, Z
    25da:	88 23       	and	r24, r24
    25dc:	39 f7       	brne	.-50     	; 0x25ac <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    25de:	0f 90       	pop	r0
    25e0:	0f 90       	pop	r0
    25e2:	0f 90       	pop	r0
    25e4:	cf 91       	pop	r28
    25e6:	df 91       	pop	r29
    25e8:	08 95       	ret

000025ea <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    25ea:	df 93       	push	r29
    25ec:	cf 93       	push	r28
    25ee:	00 d0       	rcall	.+0      	; 0x25f0 <LCD_moveCursor+0x6>
    25f0:	00 d0       	rcall	.+0      	; 0x25f2 <LCD_moveCursor+0x8>
    25f2:	0f 92       	push	r0
    25f4:	cd b7       	in	r28, 0x3d	; 61
    25f6:	de b7       	in	r29, 0x3e	; 62
    25f8:	8a 83       	std	Y+2, r24	; 0x02
    25fa:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    25fc:	8a 81       	ldd	r24, Y+2	; 0x02
    25fe:	28 2f       	mov	r18, r24
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	3d 83       	std	Y+5, r19	; 0x05
    2604:	2c 83       	std	Y+4, r18	; 0x04
    2606:	8c 81       	ldd	r24, Y+4	; 0x04
    2608:	9d 81       	ldd	r25, Y+5	; 0x05
    260a:	81 30       	cpi	r24, 0x01	; 1
    260c:	91 05       	cpc	r25, r1
    260e:	c1 f0       	breq	.+48     	; 0x2640 <LCD_moveCursor+0x56>
    2610:	2c 81       	ldd	r18, Y+4	; 0x04
    2612:	3d 81       	ldd	r19, Y+5	; 0x05
    2614:	22 30       	cpi	r18, 0x02	; 2
    2616:	31 05       	cpc	r19, r1
    2618:	2c f4       	brge	.+10     	; 0x2624 <LCD_moveCursor+0x3a>
    261a:	8c 81       	ldd	r24, Y+4	; 0x04
    261c:	9d 81       	ldd	r25, Y+5	; 0x05
    261e:	00 97       	sbiw	r24, 0x00	; 0
    2620:	61 f0       	breq	.+24     	; 0x263a <LCD_moveCursor+0x50>
    2622:	19 c0       	rjmp	.+50     	; 0x2656 <LCD_moveCursor+0x6c>
    2624:	2c 81       	ldd	r18, Y+4	; 0x04
    2626:	3d 81       	ldd	r19, Y+5	; 0x05
    2628:	22 30       	cpi	r18, 0x02	; 2
    262a:	31 05       	cpc	r19, r1
    262c:	69 f0       	breq	.+26     	; 0x2648 <LCD_moveCursor+0x5e>
    262e:	8c 81       	ldd	r24, Y+4	; 0x04
    2630:	9d 81       	ldd	r25, Y+5	; 0x05
    2632:	83 30       	cpi	r24, 0x03	; 3
    2634:	91 05       	cpc	r25, r1
    2636:	61 f0       	breq	.+24     	; 0x2650 <LCD_moveCursor+0x66>
    2638:	0e c0       	rjmp	.+28     	; 0x2656 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    263a:	8b 81       	ldd	r24, Y+3	; 0x03
    263c:	89 83       	std	Y+1, r24	; 0x01
    263e:	0b c0       	rjmp	.+22     	; 0x2656 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2640:	8b 81       	ldd	r24, Y+3	; 0x03
    2642:	80 5c       	subi	r24, 0xC0	; 192
    2644:	89 83       	std	Y+1, r24	; 0x01
    2646:	07 c0       	rjmp	.+14     	; 0x2656 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2648:	8b 81       	ldd	r24, Y+3	; 0x03
    264a:	80 5f       	subi	r24, 0xF0	; 240
    264c:	89 83       	std	Y+1, r24	; 0x01
    264e:	03 c0       	rjmp	.+6      	; 0x2656 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2650:	8b 81       	ldd	r24, Y+3	; 0x03
    2652:	80 5b       	subi	r24, 0xB0	; 176
    2654:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2656:	89 81       	ldd	r24, Y+1	; 0x01
    2658:	80 68       	ori	r24, 0x80	; 128
    265a:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <LCD_sendCommand>
}
    265e:	0f 90       	pop	r0
    2660:	0f 90       	pop	r0
    2662:	0f 90       	pop	r0
    2664:	0f 90       	pop	r0
    2666:	0f 90       	pop	r0
    2668:	cf 91       	pop	r28
    266a:	df 91       	pop	r29
    266c:	08 95       	ret

0000266e <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    266e:	df 93       	push	r29
    2670:	cf 93       	push	r28
    2672:	00 d0       	rcall	.+0      	; 0x2674 <LCD_displayStringRowColumn+0x6>
    2674:	00 d0       	rcall	.+0      	; 0x2676 <LCD_displayStringRowColumn+0x8>
    2676:	cd b7       	in	r28, 0x3d	; 61
    2678:	de b7       	in	r29, 0x3e	; 62
    267a:	89 83       	std	Y+1, r24	; 0x01
    267c:	6a 83       	std	Y+2, r22	; 0x02
    267e:	5c 83       	std	Y+4, r21	; 0x04
    2680:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2682:	89 81       	ldd	r24, Y+1	; 0x01
    2684:	6a 81       	ldd	r22, Y+2	; 0x02
    2686:	0e 94 f5 12 	call	0x25ea	; 0x25ea <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    268a:	8b 81       	ldd	r24, Y+3	; 0x03
    268c:	9c 81       	ldd	r25, Y+4	; 0x04
    268e:	0e 94 cc 12 	call	0x2598	; 0x2598 <LCD_displayString>
}
    2692:	0f 90       	pop	r0
    2694:	0f 90       	pop	r0
    2696:	0f 90       	pop	r0
    2698:	0f 90       	pop	r0
    269a:	cf 91       	pop	r28
    269c:	df 91       	pop	r29
    269e:	08 95       	ret

000026a0 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    26a0:	df 93       	push	r29
    26a2:	cf 93       	push	r28
    26a4:	cd b7       	in	r28, 0x3d	; 61
    26a6:	de b7       	in	r29, 0x3e	; 62
    26a8:	62 97       	sbiw	r28, 0x12	; 18
    26aa:	0f b6       	in	r0, 0x3f	; 63
    26ac:	f8 94       	cli
    26ae:	de bf       	out	0x3e, r29	; 62
    26b0:	0f be       	out	0x3f, r0	; 63
    26b2:	cd bf       	out	0x3d, r28	; 61
    26b4:	9a 8b       	std	Y+18, r25	; 0x12
    26b6:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    26b8:	89 89       	ldd	r24, Y+17	; 0x11
    26ba:	9a 89       	ldd	r25, Y+18	; 0x12
    26bc:	9e 01       	movw	r18, r28
    26be:	2f 5f       	subi	r18, 0xFF	; 255
    26c0:	3f 4f       	sbci	r19, 0xFF	; 255
    26c2:	b9 01       	movw	r22, r18
    26c4:	4a e0       	ldi	r20, 0x0A	; 10
    26c6:	50 e0       	ldi	r21, 0x00	; 0
    26c8:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <itoa>
   LCD_displayString(buff); /* Display the string */
    26cc:	ce 01       	movw	r24, r28
    26ce:	01 96       	adiw	r24, 0x01	; 1
    26d0:	0e 94 cc 12 	call	0x2598	; 0x2598 <LCD_displayString>
}
    26d4:	62 96       	adiw	r28, 0x12	; 18
    26d6:	0f b6       	in	r0, 0x3f	; 63
    26d8:	f8 94       	cli
    26da:	de bf       	out	0x3e, r29	; 62
    26dc:	0f be       	out	0x3f, r0	; 63
    26de:	cd bf       	out	0x3d, r28	; 61
    26e0:	cf 91       	pop	r28
    26e2:	df 91       	pop	r29
    26e4:	08 95       	ret

000026e6 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    26e6:	df 93       	push	r29
    26e8:	cf 93       	push	r28
    26ea:	cd b7       	in	r28, 0x3d	; 61
    26ec:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    26ee:	81 e0       	ldi	r24, 0x01	; 1
    26f0:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <LCD_sendCommand>
}
    26f4:	cf 91       	pop	r28
    26f6:	df 91       	pop	r29
    26f8:	08 95       	ret

000026fa <__vector_7>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
#ifdef TIMER1_CMP
ISR(TIMER1_COMPA_vect)
{
    26fa:	1f 92       	push	r1
    26fc:	0f 92       	push	r0
    26fe:	0f b6       	in	r0, 0x3f	; 63
    2700:	0f 92       	push	r0
    2702:	11 24       	eor	r1, r1
    2704:	2f 93       	push	r18
    2706:	3f 93       	push	r19
    2708:	4f 93       	push	r20
    270a:	5f 93       	push	r21
    270c:	6f 93       	push	r22
    270e:	7f 93       	push	r23
    2710:	8f 93       	push	r24
    2712:	9f 93       	push	r25
    2714:	af 93       	push	r26
    2716:	bf 93       	push	r27
    2718:	ef 93       	push	r30
    271a:	ff 93       	push	r31
    271c:	df 93       	push	r29
    271e:	cf 93       	push	r28
    2720:	cd b7       	in	r28, 0x3d	; 61
    2722:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2724:	80 91 f7 00 	lds	r24, 0x00F7
    2728:	90 91 f8 00 	lds	r25, 0x00F8
    272c:	00 97       	sbiw	r24, 0x00	; 0
    272e:	29 f0       	breq	.+10     	; 0x273a <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after timer reach the compare value */
		(*g_callBackPtr)();
    2730:	e0 91 f7 00 	lds	r30, 0x00F7
    2734:	f0 91 f8 00 	lds	r31, 0x00F8
    2738:	09 95       	icall
	}
}
    273a:	cf 91       	pop	r28
    273c:	df 91       	pop	r29
    273e:	ff 91       	pop	r31
    2740:	ef 91       	pop	r30
    2742:	bf 91       	pop	r27
    2744:	af 91       	pop	r26
    2746:	9f 91       	pop	r25
    2748:	8f 91       	pop	r24
    274a:	7f 91       	pop	r23
    274c:	6f 91       	pop	r22
    274e:	5f 91       	pop	r21
    2750:	4f 91       	pop	r20
    2752:	3f 91       	pop	r19
    2754:	2f 91       	pop	r18
    2756:	0f 90       	pop	r0
    2758:	0f be       	out	0x3f, r0	; 63
    275a:	0f 90       	pop	r0
    275c:	1f 90       	pop	r1
    275e:	18 95       	reti

00002760 <Timer1_init>:
/*
 * Description :
 * Function to initialize the Timer driver.
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    2760:	df 93       	push	r29
    2762:	cf 93       	push	r28
    2764:	00 d0       	rcall	.+0      	; 0x2766 <Timer1_init+0x6>
    2766:	cd b7       	in	r28, 0x3d	; 61
    2768:	de b7       	in	r29, 0x3e	; 62
    276a:	9a 83       	std	Y+2, r25	; 0x02
    276c:	89 83       	std	Y+1, r24	; 0x01
	/* Insert Initial Value */
	TCNT1=(Config_Ptr->initial_value);
    276e:	ac e4       	ldi	r26, 0x4C	; 76
    2770:	b0 e0       	ldi	r27, 0x00	; 0
    2772:	e9 81       	ldd	r30, Y+1	; 0x01
    2774:	fa 81       	ldd	r31, Y+2	; 0x02
    2776:	80 81       	ld	r24, Z
    2778:	91 81       	ldd	r25, Z+1	; 0x01
    277a:	11 96       	adiw	r26, 0x01	; 1
    277c:	9c 93       	st	X, r25
    277e:	8e 93       	st	-X, r24
#ifdef TIMER1_CMP
	/* Insert Compare Value in A Register */
	OCR1A=(Config_Ptr->compare_value);
    2780:	aa e4       	ldi	r26, 0x4A	; 74
    2782:	b0 e0       	ldi	r27, 0x00	; 0
    2784:	e9 81       	ldd	r30, Y+1	; 0x01
    2786:	fa 81       	ldd	r31, Y+2	; 0x02
    2788:	82 81       	ldd	r24, Z+2	; 0x02
    278a:	93 81       	ldd	r25, Z+3	; 0x03
    278c:	11 96       	adiw	r26, 0x01	; 1
    278e:	9c 93       	st	X, r25
    2790:	8e 93       	st	-X, r24
	/* Configure timer control register TCCR1A
	 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
	 * 2. FOC1A=1 FOC1B=0
	 * 3. WGM10, WGM11 to select mode
	 */
	TCCR1A=(1<<FOC1A)|(1<<FOC1B);
    2792:	ef e4       	ldi	r30, 0x4F	; 79
    2794:	f0 e0       	ldi	r31, 0x00	; 0
    2796:	8c e0       	ldi	r24, 0x0C	; 12
    2798:	80 83       	st	Z, r24
	TCCR1A=(TCCR1A&0xFC)|((Config_Ptr->mode)&0x03);
    279a:	af e4       	ldi	r26, 0x4F	; 79
    279c:	b0 e0       	ldi	r27, 0x00	; 0
    279e:	ef e4       	ldi	r30, 0x4F	; 79
    27a0:	f0 e0       	ldi	r31, 0x00	; 0
    27a2:	80 81       	ld	r24, Z
    27a4:	98 2f       	mov	r25, r24
    27a6:	9c 7f       	andi	r25, 0xFC	; 252
    27a8:	e9 81       	ldd	r30, Y+1	; 0x01
    27aa:	fa 81       	ldd	r31, Y+2	; 0x02
    27ac:	85 81       	ldd	r24, Z+5	; 0x05
    27ae:	83 70       	andi	r24, 0x03	; 3
    27b0:	89 2b       	or	r24, r25
    27b2:	8c 93       	st	X, r24
	/* Configure timer control register TCCR1B
	 * 1. CTC Mode WGM12=1 WGM13=0 (Mode Number 4)
	 * 2. Prescaler = F_CPU/1024 CS10=1 CS11=0 CS12=1
	 */
	TCCR1B=((Config_Ptr->prescaler)&0x07);
    27b4:	ae e4       	ldi	r26, 0x4E	; 78
    27b6:	b0 e0       	ldi	r27, 0x00	; 0
    27b8:	e9 81       	ldd	r30, Y+1	; 0x01
    27ba:	fa 81       	ldd	r31, Y+2	; 0x02
    27bc:	84 81       	ldd	r24, Z+4	; 0x04
    27be:	87 70       	andi	r24, 0x07	; 7
    27c0:	8c 93       	st	X, r24
	TCCR1B=(TCCR1B&0xE7)|(((Config_Ptr->mode)&0x0C)<<3);
    27c2:	ae e4       	ldi	r26, 0x4E	; 78
    27c4:	b0 e0       	ldi	r27, 0x00	; 0
    27c6:	ee e4       	ldi	r30, 0x4E	; 78
    27c8:	f0 e0       	ldi	r31, 0x00	; 0
    27ca:	80 81       	ld	r24, Z
    27cc:	28 2f       	mov	r18, r24
    27ce:	27 7e       	andi	r18, 0xE7	; 231
    27d0:	e9 81       	ldd	r30, Y+1	; 0x01
    27d2:	fa 81       	ldd	r31, Y+2	; 0x02
    27d4:	85 81       	ldd	r24, Z+5	; 0x05
    27d6:	88 2f       	mov	r24, r24
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	8c 70       	andi	r24, 0x0C	; 12
    27dc:	90 70       	andi	r25, 0x00	; 0
    27de:	88 0f       	add	r24, r24
    27e0:	99 1f       	adc	r25, r25
    27e2:	88 0f       	add	r24, r24
    27e4:	99 1f       	adc	r25, r25
    27e6:	88 0f       	add	r24, r24
    27e8:	99 1f       	adc	r25, r25
    27ea:	82 2b       	or	r24, r18
    27ec:	8c 93       	st	X, r24
	/* Enable Timer 1 Compare A Interrupt and Timer 1 Overflow Interrupt */
	TIMSK|=(1<<OCIE1A);
    27ee:	a9 e5       	ldi	r26, 0x59	; 89
    27f0:	b0 e0       	ldi	r27, 0x00	; 0
    27f2:	e9 e5       	ldi	r30, 0x59	; 89
    27f4:	f0 e0       	ldi	r31, 0x00	; 0
    27f6:	80 81       	ld	r24, Z
    27f8:	80 61       	ori	r24, 0x10	; 16
    27fa:	8c 93       	st	X, r24
	TIMSK|=(1<<TOIE1);
    27fc:	a9 e5       	ldi	r26, 0x59	; 89
    27fe:	b0 e0       	ldi	r27, 0x00	; 0
    2800:	e9 e5       	ldi	r30, 0x59	; 89
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	80 81       	ld	r24, Z
    2806:	84 60       	ori	r24, 0x04	; 4
    2808:	8c 93       	st	X, r24
}
    280a:	0f 90       	pop	r0
    280c:	0f 90       	pop	r0
    280e:	cf 91       	pop	r28
    2810:	df 91       	pop	r29
    2812:	08 95       	ret

00002814 <Timer1_deInit>:
/*
 * Description :
 * Function to disable the Timer1.
 */
void Timer1_deInit(void)
{
    2814:	df 93       	push	r29
    2816:	cf 93       	push	r28
    2818:	cd b7       	in	r28, 0x3d	; 61
    281a:	de b7       	in	r29, 0x3e	; 62
	/* disable timer 1 */
	TCCR1A=0;
    281c:	ef e4       	ldi	r30, 0x4F	; 79
    281e:	f0 e0       	ldi	r31, 0x00	; 0
    2820:	10 82       	st	Z, r1
	TCCR1B=0;
    2822:	ee e4       	ldi	r30, 0x4E	; 78
    2824:	f0 e0       	ldi	r31, 0x00	; 0
    2826:	10 82       	st	Z, r1
}
    2828:	cf 91       	pop	r28
    282a:	df 91       	pop	r29
    282c:	08 95       	ret

0000282e <Timer1_setCallBack>:
/*
 * Description :
 * Function to set the Call Back function address.
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    282e:	df 93       	push	r29
    2830:	cf 93       	push	r28
    2832:	00 d0       	rcall	.+0      	; 0x2834 <Timer1_setCallBack+0x6>
    2834:	cd b7       	in	r28, 0x3d	; 61
    2836:	de b7       	in	r29, 0x3e	; 62
    2838:	9a 83       	std	Y+2, r25	; 0x02
    283a:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    283c:	89 81       	ldd	r24, Y+1	; 0x01
    283e:	9a 81       	ldd	r25, Y+2	; 0x02
    2840:	90 93 f8 00 	sts	0x00F8, r25
    2844:	80 93 f7 00 	sts	0x00F7, r24
}
    2848:	0f 90       	pop	r0
    284a:	0f 90       	pop	r0
    284c:	cf 91       	pop	r28
    284e:	df 91       	pop	r29
    2850:	08 95       	ret

00002852 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *Config_ptr)
{
    2852:	df 93       	push	r29
    2854:	cf 93       	push	r28
    2856:	00 d0       	rcall	.+0      	; 0x2858 <UART_init+0x6>
    2858:	00 d0       	rcall	.+0      	; 0x285a <UART_init+0x8>
    285a:	cd b7       	in	r28, 0x3d	; 61
    285c:	de b7       	in	r29, 0x3e	; 62
    285e:	9c 83       	std	Y+4, r25	; 0x04
    2860:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2862:	1a 82       	std	Y+2, r1	; 0x02
    2864:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2866:	eb e2       	ldi	r30, 0x2B	; 43
    2868:	f0 e0       	ldi	r31, 0x00	; 0
    286a:	82 e0       	ldi	r24, 0x02	; 2
    286c:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode 1 For 9-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    286e:	ea e2       	ldi	r30, 0x2A	; 42
    2870:	f0 e0       	ldi	r31, 0x00	; 0
    2872:	88 e1       	ldi	r24, 0x18	; 24
    2874:	80 83       	st	Z, r24
	UCSRB = (UCSRB&0xFB)|((Config_ptr->bit_data)&0x04);
    2876:	aa e2       	ldi	r26, 0x2A	; 42
    2878:	b0 e0       	ldi	r27, 0x00	; 0
    287a:	ea e2       	ldi	r30, 0x2A	; 42
    287c:	f0 e0       	ldi	r31, 0x00	; 0
    287e:	80 81       	ld	r24, Z
    2880:	98 2f       	mov	r25, r24
    2882:	9b 7f       	andi	r25, 0xFB	; 251
    2884:	eb 81       	ldd	r30, Y+3	; 0x03
    2886:	fc 81       	ldd	r31, Y+4	; 0x04
    2888:	80 81       	ld	r24, Z
    288a:	84 70       	andi	r24, 0x04	; 4
    288c:	89 2b       	or	r24, r25
    288e:	8c 93       	st	X, r24
	 * UPM1:0  = Parity mode select by inserting the required
	 * USBS    = stop bit select by inserting the required
	 * UCSZ1:0 = character size select by inserting the required
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    2890:	e0 e4       	ldi	r30, 0x40	; 64
    2892:	f0 e0       	ldi	r31, 0x00	; 0
    2894:	80 e8       	ldi	r24, 0x80	; 128
    2896:	80 83       	st	Z, r24
	UCSRC = (UCSRC&0xCF)|((Config_ptr->parity)<<4);
    2898:	a0 e4       	ldi	r26, 0x40	; 64
    289a:	b0 e0       	ldi	r27, 0x00	; 0
    289c:	e0 e4       	ldi	r30, 0x40	; 64
    289e:	f0 e0       	ldi	r31, 0x00	; 0
    28a0:	80 81       	ld	r24, Z
    28a2:	28 2f       	mov	r18, r24
    28a4:	2f 7c       	andi	r18, 0xCF	; 207
    28a6:	eb 81       	ldd	r30, Y+3	; 0x03
    28a8:	fc 81       	ldd	r31, Y+4	; 0x04
    28aa:	81 81       	ldd	r24, Z+1	; 0x01
    28ac:	88 2f       	mov	r24, r24
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	82 95       	swap	r24
    28b2:	92 95       	swap	r25
    28b4:	90 7f       	andi	r25, 0xF0	; 240
    28b6:	98 27       	eor	r25, r24
    28b8:	80 7f       	andi	r24, 0xF0	; 240
    28ba:	98 27       	eor	r25, r24
    28bc:	82 2b       	or	r24, r18
    28be:	8c 93       	st	X, r24
	UCSRC = (UCSRC&0xF7)|((Config_ptr->stop_bit)<<3);
    28c0:	a0 e4       	ldi	r26, 0x40	; 64
    28c2:	b0 e0       	ldi	r27, 0x00	; 0
    28c4:	e0 e4       	ldi	r30, 0x40	; 64
    28c6:	f0 e0       	ldi	r31, 0x00	; 0
    28c8:	80 81       	ld	r24, Z
    28ca:	28 2f       	mov	r18, r24
    28cc:	27 7f       	andi	r18, 0xF7	; 247
    28ce:	eb 81       	ldd	r30, Y+3	; 0x03
    28d0:	fc 81       	ldd	r31, Y+4	; 0x04
    28d2:	82 81       	ldd	r24, Z+2	; 0x02
    28d4:	88 2f       	mov	r24, r24
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	88 0f       	add	r24, r24
    28da:	99 1f       	adc	r25, r25
    28dc:	88 0f       	add	r24, r24
    28de:	99 1f       	adc	r25, r25
    28e0:	88 0f       	add	r24, r24
    28e2:	99 1f       	adc	r25, r25
    28e4:	82 2b       	or	r24, r18
    28e6:	8c 93       	st	X, r24
	UCSRC = (UCSRC&0xF9)|((Config_ptr->bit_data)<<1);
    28e8:	a0 e4       	ldi	r26, 0x40	; 64
    28ea:	b0 e0       	ldi	r27, 0x00	; 0
    28ec:	e0 e4       	ldi	r30, 0x40	; 64
    28ee:	f0 e0       	ldi	r31, 0x00	; 0
    28f0:	80 81       	ld	r24, Z
    28f2:	28 2f       	mov	r18, r24
    28f4:	29 7f       	andi	r18, 0xF9	; 249
    28f6:	eb 81       	ldd	r30, Y+3	; 0x03
    28f8:	fc 81       	ldd	r31, Y+4	; 0x04
    28fa:	80 81       	ld	r24, Z
    28fc:	88 2f       	mov	r24, r24
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	88 0f       	add	r24, r24
    2902:	99 1f       	adc	r25, r25
    2904:	82 2b       	or	r24, r18
    2906:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_ptr->baud_rate) * 8UL))) - 1);
    2908:	eb 81       	ldd	r30, Y+3	; 0x03
    290a:	fc 81       	ldd	r31, Y+4	; 0x04
    290c:	83 81       	ldd	r24, Z+3	; 0x03
    290e:	94 81       	ldd	r25, Z+4	; 0x04
    2910:	a5 81       	ldd	r26, Z+5	; 0x05
    2912:	b6 81       	ldd	r27, Z+6	; 0x06
    2914:	88 0f       	add	r24, r24
    2916:	99 1f       	adc	r25, r25
    2918:	aa 1f       	adc	r26, r26
    291a:	bb 1f       	adc	r27, r27
    291c:	88 0f       	add	r24, r24
    291e:	99 1f       	adc	r25, r25
    2920:	aa 1f       	adc	r26, r26
    2922:	bb 1f       	adc	r27, r27
    2924:	88 0f       	add	r24, r24
    2926:	99 1f       	adc	r25, r25
    2928:	aa 1f       	adc	r26, r26
    292a:	bb 1f       	adc	r27, r27
    292c:	9c 01       	movw	r18, r24
    292e:	ad 01       	movw	r20, r26
    2930:	80 e4       	ldi	r24, 0x40	; 64
    2932:	92 e4       	ldi	r25, 0x42	; 66
    2934:	af e0       	ldi	r26, 0x0F	; 15
    2936:	b0 e0       	ldi	r27, 0x00	; 0
    2938:	bc 01       	movw	r22, r24
    293a:	cd 01       	movw	r24, r26
    293c:	0e 94 49 15 	call	0x2a92	; 0x2a92 <__udivmodsi4>
    2940:	da 01       	movw	r26, r20
    2942:	c9 01       	movw	r24, r18
    2944:	01 97       	sbiw	r24, 0x01	; 1
    2946:	9a 83       	std	Y+2, r25	; 0x02
    2948:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    294a:	e0 e4       	ldi	r30, 0x40	; 64
    294c:	f0 e0       	ldi	r31, 0x00	; 0
    294e:	89 81       	ldd	r24, Y+1	; 0x01
    2950:	9a 81       	ldd	r25, Y+2	; 0x02
    2952:	89 2f       	mov	r24, r25
    2954:	99 27       	eor	r25, r25
    2956:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2958:	e9 e2       	ldi	r30, 0x29	; 41
    295a:	f0 e0       	ldi	r31, 0x00	; 0
    295c:	89 81       	ldd	r24, Y+1	; 0x01
    295e:	80 83       	st	Z, r24
}
    2960:	0f 90       	pop	r0
    2962:	0f 90       	pop	r0
    2964:	0f 90       	pop	r0
    2966:	0f 90       	pop	r0
    2968:	cf 91       	pop	r28
    296a:	df 91       	pop	r29
    296c:	08 95       	ret

0000296e <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    296e:	df 93       	push	r29
    2970:	cf 93       	push	r28
    2972:	0f 92       	push	r0
    2974:	cd b7       	in	r28, 0x3d	; 61
    2976:	de b7       	in	r29, 0x3e	; 62
    2978:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    297a:	eb e2       	ldi	r30, 0x2B	; 43
    297c:	f0 e0       	ldi	r31, 0x00	; 0
    297e:	80 81       	ld	r24, Z
    2980:	88 2f       	mov	r24, r24
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	80 72       	andi	r24, 0x20	; 32
    2986:	90 70       	andi	r25, 0x00	; 0
    2988:	00 97       	sbiw	r24, 0x00	; 0
    298a:	b9 f3       	breq	.-18     	; 0x297a <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    298c:	ec e2       	ldi	r30, 0x2C	; 44
    298e:	f0 e0       	ldi	r31, 0x00	; 0
    2990:	89 81       	ldd	r24, Y+1	; 0x01
    2992:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2994:	0f 90       	pop	r0
    2996:	cf 91       	pop	r28
    2998:	df 91       	pop	r29
    299a:	08 95       	ret

0000299c <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    299c:	df 93       	push	r29
    299e:	cf 93       	push	r28
    29a0:	cd b7       	in	r28, 0x3d	; 61
    29a2:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    29a4:	eb e2       	ldi	r30, 0x2B	; 43
    29a6:	f0 e0       	ldi	r31, 0x00	; 0
    29a8:	80 81       	ld	r24, Z
    29aa:	88 23       	and	r24, r24
    29ac:	dc f7       	brge	.-10     	; 0x29a4 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    29ae:	ec e2       	ldi	r30, 0x2C	; 44
    29b0:	f0 e0       	ldi	r31, 0x00	; 0
    29b2:	80 81       	ld	r24, Z
}
    29b4:	cf 91       	pop	r28
    29b6:	df 91       	pop	r29
    29b8:	08 95       	ret

000029ba <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    29ba:	df 93       	push	r29
    29bc:	cf 93       	push	r28
    29be:	00 d0       	rcall	.+0      	; 0x29c0 <UART_sendString+0x6>
    29c0:	0f 92       	push	r0
    29c2:	cd b7       	in	r28, 0x3d	; 61
    29c4:	de b7       	in	r29, 0x3e	; 62
    29c6:	9b 83       	std	Y+3, r25	; 0x03
    29c8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    29ca:	19 82       	std	Y+1, r1	; 0x01
    29cc:	0e c0       	rjmp	.+28     	; 0x29ea <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    29ce:	89 81       	ldd	r24, Y+1	; 0x01
    29d0:	28 2f       	mov	r18, r24
    29d2:	30 e0       	ldi	r19, 0x00	; 0
    29d4:	8a 81       	ldd	r24, Y+2	; 0x02
    29d6:	9b 81       	ldd	r25, Y+3	; 0x03
    29d8:	fc 01       	movw	r30, r24
    29da:	e2 0f       	add	r30, r18
    29dc:	f3 1f       	adc	r31, r19
    29de:	80 81       	ld	r24, Z
    29e0:	0e 94 b7 14 	call	0x296e	; 0x296e <UART_sendByte>
		i++;
    29e4:	89 81       	ldd	r24, Y+1	; 0x01
    29e6:	8f 5f       	subi	r24, 0xFF	; 255
    29e8:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    29ea:	89 81       	ldd	r24, Y+1	; 0x01
    29ec:	28 2f       	mov	r18, r24
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	8a 81       	ldd	r24, Y+2	; 0x02
    29f2:	9b 81       	ldd	r25, Y+3	; 0x03
    29f4:	fc 01       	movw	r30, r24
    29f6:	e2 0f       	add	r30, r18
    29f8:	f3 1f       	adc	r31, r19
    29fa:	80 81       	ld	r24, Z
    29fc:	88 23       	and	r24, r24
    29fe:	39 f7       	brne	.-50     	; 0x29ce <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2a00:	0f 90       	pop	r0
    2a02:	0f 90       	pop	r0
    2a04:	0f 90       	pop	r0
    2a06:	cf 91       	pop	r28
    2a08:	df 91       	pop	r29
    2a0a:	08 95       	ret

00002a0c <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2a0c:	0f 93       	push	r16
    2a0e:	1f 93       	push	r17
    2a10:	df 93       	push	r29
    2a12:	cf 93       	push	r28
    2a14:	00 d0       	rcall	.+0      	; 0x2a16 <UART_receiveString+0xa>
    2a16:	0f 92       	push	r0
    2a18:	cd b7       	in	r28, 0x3d	; 61
    2a1a:	de b7       	in	r29, 0x3e	; 62
    2a1c:	9b 83       	std	Y+3, r25	; 0x03
    2a1e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2a20:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2a22:	89 81       	ldd	r24, Y+1	; 0x01
    2a24:	28 2f       	mov	r18, r24
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	8a 81       	ldd	r24, Y+2	; 0x02
    2a2a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a2c:	8c 01       	movw	r16, r24
    2a2e:	02 0f       	add	r16, r18
    2a30:	13 1f       	adc	r17, r19
    2a32:	0e 94 ce 14 	call	0x299c	; 0x299c <UART_recieveByte>
    2a36:	f8 01       	movw	r30, r16
    2a38:	80 83       	st	Z, r24
    2a3a:	0f c0       	rjmp	.+30     	; 0x2a5a <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2a3c:	89 81       	ldd	r24, Y+1	; 0x01
    2a3e:	8f 5f       	subi	r24, 0xFF	; 255
    2a40:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2a42:	89 81       	ldd	r24, Y+1	; 0x01
    2a44:	28 2f       	mov	r18, r24
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	8a 81       	ldd	r24, Y+2	; 0x02
    2a4a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a4c:	8c 01       	movw	r16, r24
    2a4e:	02 0f       	add	r16, r18
    2a50:	13 1f       	adc	r17, r19
    2a52:	0e 94 ce 14 	call	0x299c	; 0x299c <UART_recieveByte>
    2a56:	f8 01       	movw	r30, r16
    2a58:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2a5a:	89 81       	ldd	r24, Y+1	; 0x01
    2a5c:	28 2f       	mov	r18, r24
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	8a 81       	ldd	r24, Y+2	; 0x02
    2a62:	9b 81       	ldd	r25, Y+3	; 0x03
    2a64:	fc 01       	movw	r30, r24
    2a66:	e2 0f       	add	r30, r18
    2a68:	f3 1f       	adc	r31, r19
    2a6a:	80 81       	ld	r24, Z
    2a6c:	83 32       	cpi	r24, 0x23	; 35
    2a6e:	31 f7       	brne	.-52     	; 0x2a3c <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2a70:	89 81       	ldd	r24, Y+1	; 0x01
    2a72:	28 2f       	mov	r18, r24
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	8a 81       	ldd	r24, Y+2	; 0x02
    2a78:	9b 81       	ldd	r25, Y+3	; 0x03
    2a7a:	fc 01       	movw	r30, r24
    2a7c:	e2 0f       	add	r30, r18
    2a7e:	f3 1f       	adc	r31, r19
    2a80:	10 82       	st	Z, r1
}
    2a82:	0f 90       	pop	r0
    2a84:	0f 90       	pop	r0
    2a86:	0f 90       	pop	r0
    2a88:	cf 91       	pop	r28
    2a8a:	df 91       	pop	r29
    2a8c:	1f 91       	pop	r17
    2a8e:	0f 91       	pop	r16
    2a90:	08 95       	ret

00002a92 <__udivmodsi4>:
    2a92:	a1 e2       	ldi	r26, 0x21	; 33
    2a94:	1a 2e       	mov	r1, r26
    2a96:	aa 1b       	sub	r26, r26
    2a98:	bb 1b       	sub	r27, r27
    2a9a:	fd 01       	movw	r30, r26
    2a9c:	0d c0       	rjmp	.+26     	; 0x2ab8 <__udivmodsi4_ep>

00002a9e <__udivmodsi4_loop>:
    2a9e:	aa 1f       	adc	r26, r26
    2aa0:	bb 1f       	adc	r27, r27
    2aa2:	ee 1f       	adc	r30, r30
    2aa4:	ff 1f       	adc	r31, r31
    2aa6:	a2 17       	cp	r26, r18
    2aa8:	b3 07       	cpc	r27, r19
    2aaa:	e4 07       	cpc	r30, r20
    2aac:	f5 07       	cpc	r31, r21
    2aae:	20 f0       	brcs	.+8      	; 0x2ab8 <__udivmodsi4_ep>
    2ab0:	a2 1b       	sub	r26, r18
    2ab2:	b3 0b       	sbc	r27, r19
    2ab4:	e4 0b       	sbc	r30, r20
    2ab6:	f5 0b       	sbc	r31, r21

00002ab8 <__udivmodsi4_ep>:
    2ab8:	66 1f       	adc	r22, r22
    2aba:	77 1f       	adc	r23, r23
    2abc:	88 1f       	adc	r24, r24
    2abe:	99 1f       	adc	r25, r25
    2ac0:	1a 94       	dec	r1
    2ac2:	69 f7       	brne	.-38     	; 0x2a9e <__udivmodsi4_loop>
    2ac4:	60 95       	com	r22
    2ac6:	70 95       	com	r23
    2ac8:	80 95       	com	r24
    2aca:	90 95       	com	r25
    2acc:	9b 01       	movw	r18, r22
    2ace:	ac 01       	movw	r20, r24
    2ad0:	bd 01       	movw	r22, r26
    2ad2:	cf 01       	movw	r24, r30
    2ad4:	08 95       	ret

00002ad6 <__prologue_saves__>:
    2ad6:	2f 92       	push	r2
    2ad8:	3f 92       	push	r3
    2ada:	4f 92       	push	r4
    2adc:	5f 92       	push	r5
    2ade:	6f 92       	push	r6
    2ae0:	7f 92       	push	r7
    2ae2:	8f 92       	push	r8
    2ae4:	9f 92       	push	r9
    2ae6:	af 92       	push	r10
    2ae8:	bf 92       	push	r11
    2aea:	cf 92       	push	r12
    2aec:	df 92       	push	r13
    2aee:	ef 92       	push	r14
    2af0:	ff 92       	push	r15
    2af2:	0f 93       	push	r16
    2af4:	1f 93       	push	r17
    2af6:	cf 93       	push	r28
    2af8:	df 93       	push	r29
    2afa:	cd b7       	in	r28, 0x3d	; 61
    2afc:	de b7       	in	r29, 0x3e	; 62
    2afe:	ca 1b       	sub	r28, r26
    2b00:	db 0b       	sbc	r29, r27
    2b02:	0f b6       	in	r0, 0x3f	; 63
    2b04:	f8 94       	cli
    2b06:	de bf       	out	0x3e, r29	; 62
    2b08:	0f be       	out	0x3f, r0	; 63
    2b0a:	cd bf       	out	0x3d, r28	; 61
    2b0c:	09 94       	ijmp

00002b0e <__epilogue_restores__>:
    2b0e:	2a 88       	ldd	r2, Y+18	; 0x12
    2b10:	39 88       	ldd	r3, Y+17	; 0x11
    2b12:	48 88       	ldd	r4, Y+16	; 0x10
    2b14:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b16:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b18:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b1a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b1c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b1e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b20:	b9 84       	ldd	r11, Y+9	; 0x09
    2b22:	c8 84       	ldd	r12, Y+8	; 0x08
    2b24:	df 80       	ldd	r13, Y+7	; 0x07
    2b26:	ee 80       	ldd	r14, Y+6	; 0x06
    2b28:	fd 80       	ldd	r15, Y+5	; 0x05
    2b2a:	0c 81       	ldd	r16, Y+4	; 0x04
    2b2c:	1b 81       	ldd	r17, Y+3	; 0x03
    2b2e:	aa 81       	ldd	r26, Y+2	; 0x02
    2b30:	b9 81       	ldd	r27, Y+1	; 0x01
    2b32:	ce 0f       	add	r28, r30
    2b34:	d1 1d       	adc	r29, r1
    2b36:	0f b6       	in	r0, 0x3f	; 63
    2b38:	f8 94       	cli
    2b3a:	de bf       	out	0x3e, r29	; 62
    2b3c:	0f be       	out	0x3f, r0	; 63
    2b3e:	cd bf       	out	0x3d, r28	; 61
    2b40:	ed 01       	movw	r28, r26
    2b42:	08 95       	ret

00002b44 <itoa>:
    2b44:	fb 01       	movw	r30, r22
    2b46:	9f 01       	movw	r18, r30
    2b48:	e8 94       	clt
    2b4a:	42 30       	cpi	r20, 0x02	; 2
    2b4c:	c4 f0       	brlt	.+48     	; 0x2b7e <itoa+0x3a>
    2b4e:	45 32       	cpi	r20, 0x25	; 37
    2b50:	b4 f4       	brge	.+44     	; 0x2b7e <itoa+0x3a>
    2b52:	4a 30       	cpi	r20, 0x0A	; 10
    2b54:	29 f4       	brne	.+10     	; 0x2b60 <itoa+0x1c>
    2b56:	97 fb       	bst	r25, 7
    2b58:	1e f4       	brtc	.+6      	; 0x2b60 <itoa+0x1c>
    2b5a:	90 95       	com	r25
    2b5c:	81 95       	neg	r24
    2b5e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b60:	64 2f       	mov	r22, r20
    2b62:	77 27       	eor	r23, r23
    2b64:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <__udivmodhi4>
    2b68:	80 5d       	subi	r24, 0xD0	; 208
    2b6a:	8a 33       	cpi	r24, 0x3A	; 58
    2b6c:	0c f0       	brlt	.+2      	; 0x2b70 <itoa+0x2c>
    2b6e:	89 5d       	subi	r24, 0xD9	; 217
    2b70:	81 93       	st	Z+, r24
    2b72:	cb 01       	movw	r24, r22
    2b74:	00 97       	sbiw	r24, 0x00	; 0
    2b76:	a1 f7       	brne	.-24     	; 0x2b60 <itoa+0x1c>
    2b78:	16 f4       	brtc	.+4      	; 0x2b7e <itoa+0x3a>
    2b7a:	5d e2       	ldi	r21, 0x2D	; 45
    2b7c:	51 93       	st	Z+, r21
    2b7e:	10 82       	st	Z, r1
    2b80:	c9 01       	movw	r24, r18
    2b82:	0c 94 c3 15 	jmp	0x2b86	; 0x2b86 <strrev>

00002b86 <strrev>:
    2b86:	dc 01       	movw	r26, r24
    2b88:	fc 01       	movw	r30, r24
    2b8a:	67 2f       	mov	r22, r23
    2b8c:	71 91       	ld	r23, Z+
    2b8e:	77 23       	and	r23, r23
    2b90:	e1 f7       	brne	.-8      	; 0x2b8a <strrev+0x4>
    2b92:	32 97       	sbiw	r30, 0x02	; 2
    2b94:	04 c0       	rjmp	.+8      	; 0x2b9e <strrev+0x18>
    2b96:	7c 91       	ld	r23, X
    2b98:	6d 93       	st	X+, r22
    2b9a:	70 83       	st	Z, r23
    2b9c:	62 91       	ld	r22, -Z
    2b9e:	ae 17       	cp	r26, r30
    2ba0:	bf 07       	cpc	r27, r31
    2ba2:	c8 f3       	brcs	.-14     	; 0x2b96 <strrev+0x10>
    2ba4:	08 95       	ret

00002ba6 <__udivmodhi4>:
    2ba6:	aa 1b       	sub	r26, r26
    2ba8:	bb 1b       	sub	r27, r27
    2baa:	51 e1       	ldi	r21, 0x11	; 17
    2bac:	07 c0       	rjmp	.+14     	; 0x2bbc <__udivmodhi4_ep>

00002bae <__udivmodhi4_loop>:
    2bae:	aa 1f       	adc	r26, r26
    2bb0:	bb 1f       	adc	r27, r27
    2bb2:	a6 17       	cp	r26, r22
    2bb4:	b7 07       	cpc	r27, r23
    2bb6:	10 f0       	brcs	.+4      	; 0x2bbc <__udivmodhi4_ep>
    2bb8:	a6 1b       	sub	r26, r22
    2bba:	b7 0b       	sbc	r27, r23

00002bbc <__udivmodhi4_ep>:
    2bbc:	88 1f       	adc	r24, r24
    2bbe:	99 1f       	adc	r25, r25
    2bc0:	5a 95       	dec	r21
    2bc2:	a9 f7       	brne	.-22     	; 0x2bae <__udivmodhi4_loop>
    2bc4:	80 95       	com	r24
    2bc6:	90 95       	com	r25
    2bc8:	bc 01       	movw	r22, r24
    2bca:	cd 01       	movw	r24, r26
    2bcc:	08 95       	ret

00002bce <_exit>:
    2bce:	f8 94       	cli

00002bd0 <__stop_program>:
    2bd0:	ff cf       	rjmp	.-2      	; 0x2bd0 <__stop_program>
